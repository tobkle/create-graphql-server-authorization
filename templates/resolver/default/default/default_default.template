/* eslint-disable prettier */
/* eslint comma-dangle: [2, "only-multiline"] */
const resolvers = {
  {{TypeName}}: {
    id({{typeName}}) {
      return {{typeName}}._id;
    },
{{#each singularFields}}
{{> defaultSingularField }}
{{/each}}
{{#each paginatedFields}}
{{> defaultPaginatedField }}
{{/each}}
  },
  Query: {
    {{typeName}}s(root, { lastCreatedAt, limit }, { {{TypeName}}, me }) {
      return {{TypeName}}.find({ lastCreatedAt, limit }, me, '{{typeName}}s');
    },

    {{typeName}}(root, { id }, { {{TypeName}}, me }) {
      return {{TypeName}}.findOneById(id, me, '{{typeName}}');
    }
  },
  Mutation: {
    async create{{TypeName}}(root, { input }, { {{TypeName}}, me }) {
      return await {{TypeName}}.insert(input, me, 'create{{TypeName}}');
    },

    async update{{TypeName}}(root, { id, input }, { {{TypeName}}, me }) {
      return await {{TypeName}}.updateById(id, input, me, 'update{{TypeName}}');
    },

    async remove{{TypeName}}(root, { id }, { {{TypeName}}, me }) {
      return await {{TypeName}}.removeById(id, me, 'remove{{TypeName}}');
    }
  },
  Subscription: {
    {{typeName}}Created: {{typeName}} => {{typeName}},
    {{typeName}}Updated: {{typeName}} => {{typeName}},
    {{typeName}}Removed: id => id
  }
};

export default resolvers;
