[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/constants.js",
    "content": "// @flow\n\n// name of the @authorize directive, which triggers authorization logic\nexport const AUTHORIZE_DIRECTIVE = 'authorize';\n\n// loglevel, maximum logfile size, maximum number of logfiles\nexport const LOG_LEVEL = 'debug';\nexport const LOG_MAX_FILES = 5;\nexport const LOG_MAX_SIZE = 5;\n\n// constants to read GraphQL Abstract Syntax Tree (AST)\nexport const FIELD_DEFINITION = 'FieldDefinition';\nexport const NON_NULL_TYPE = 'NonNullType';\nexport const STRING_VALUE = 'StringValue';\nexport const LIST_TYPE = 'ListType';\nexport const LIST_VALUE = 'ListValue';\nexport const DIRECTIVE = 'Directive';\nexport const ARGUMENT = 'Argument';\nexport const NAME = 'Name';\n\n// valid authorization mode values:\nexport const CREATE = 'create';\nexport const READ = 'read'; // which means both: 'readOne' and 'readMany'\nexport const READ_ONE = 'readOne';\nexport const READ_MANY = 'readMany';\nexport const UPDATE = 'update';\nexport const DELETE = 'delete';\n\n// for the role definitions\nexport const USER_ROLE = 'userRole';\nexport const DOC_ROLE = 'docRole';\nexport const AUTH_ROLE = 'authRole';\nexport const FOR = 'for';\nexport const THIS = 'this';\nexport const WORLD = 'world';\nexport const NO_ROLE = '<no-role>';\nexport const NO_USER = '<no-user>';\nexport const NAMED_TYPE = 'NamedType';\nexport const STRING = 'String';\nexport const LIST_OF_STRINGS = '[String]';\nexport const USER_MODEL = 'user';\nexport const USER = 'User';\nexport const LIST_OF_USERS = '[User]';\nexport const ID_FIELD = '_id';\nexport const ID_SINGULAR = 'Id';\nexport const ID_PLURAL = 'Ids';\n\n// valid authorization modes\nexport const MODES = [CREATE, READ, READ_ONE, READ_MANY, UPDATE, DELETE];\n\n// template for default allRoles, to prepare one role\nexport const CODE_MODES = [CREATE, READ_ONE, READ_MANY, UPDATE, DELETE];\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "AUTHORIZE_DIRECTIVE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~AUTHORIZE_DIRECTIVE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{AUTHORIZE_DIRECTIVE}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "LOG_LEVEL",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LOG_LEVEL",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LOG_LEVEL}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "LOG_MAX_FILES",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LOG_MAX_FILES",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LOG_MAX_FILES}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "LOG_MAX_SIZE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LOG_MAX_SIZE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LOG_MAX_SIZE}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "FIELD_DEFINITION",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~FIELD_DEFINITION",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{FIELD_DEFINITION}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "NON_NULL_TYPE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~NON_NULL_TYPE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{NON_NULL_TYPE}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "STRING_VALUE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~STRING_VALUE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{STRING_VALUE}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "LIST_TYPE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LIST_TYPE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LIST_TYPE}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "LIST_VALUE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LIST_VALUE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LIST_VALUE}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "DIRECTIVE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DIRECTIVE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{DIRECTIVE}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "ARGUMENT",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ARGUMENT",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{ARGUMENT}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "NAME",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~NAME",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{NAME}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "CREATE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~CREATE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{CREATE}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "READ",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~READ",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{READ}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "READ_ONE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~READ_ONE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{READ_ONE}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "READ_MANY",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~READ_MANY",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{READ_MANY}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "UPDATE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~UPDATE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{UPDATE}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "DELETE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DELETE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{DELETE}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "USER_ROLE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~USER_ROLE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{USER_ROLE}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "DOC_ROLE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DOC_ROLE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{DOC_ROLE}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "AUTH_ROLE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~AUTH_ROLE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{AUTH_ROLE}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "FOR",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~FOR",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{FOR}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "THIS",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~THIS",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{THIS}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "WORLD",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~WORLD",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{WORLD}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "NO_ROLE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~NO_ROLE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{NO_ROLE}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "NO_USER",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~NO_USER",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{NO_USER}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "NAMED_TYPE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~NAMED_TYPE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{NAMED_TYPE}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "STRING",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~STRING",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{STRING}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "LIST_OF_STRINGS",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LIST_OF_STRINGS",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LIST_OF_STRINGS}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "USER_MODEL",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~USER_MODEL",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{USER_MODEL}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "USER",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~USER",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{USER}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "LIST_OF_USERS",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~LIST_OF_USERS",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{LIST_OF_USERS}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "ID_FIELD",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ID_FIELD",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{ID_FIELD}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "ID_SINGULAR",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ID_SINGULAR",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{ID_SINGULAR}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ID_PLURAL",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ID_PLURAL",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{ID_PLURAL}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "MODES",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~MODES",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{MODES}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "CODE_MODES",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~CODE_MODES",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/constants.js",
    "importStyle": "{CODE_MODES}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/generate/extractRoles.js",
    "content": "// @flow\n\nimport { getRoleType } from './getRoleType';\nimport {\n  ARGUMENT,\n  NAME,\n  LIST_VALUE,\n  STRING_VALUE,\n  MODES,\n  CODE_MODES,\n  READ,\n  READ_ONE,\n  READ_MANY\n} from '../constants';\n\n/**\n * extract the roles from the @authorize directive\n * by reading the input schema's abstract syntax tree\n * to get the roles and their authorized modes\n * @private\n * @param {object} allRolesArguments - AST with role definitions\n * @param {object} inputSchema - the schema of the type\n * @return {array} allRoles - returns the defined roles\n * @example \n *          @authorize(\n *            admin: [\"create\", \"read\", \"update\", \"delete\"]\n *            this: [\"read\", \"update\", \"delete\"]\n *          )\n */\n\nexport function extractRoles(\n  allRolesArguments: any = [],\n  inputSchema: any\n): Array<any> {\n  const allRoles = [];\n  // get all Roles of the type's @authorize directives\n  // e.g. 'admin', 'this'\n  allRolesArguments.forEach(roleArgument => {\n    // new role found\n    const role = {};\n\n    // check if it is a valid role\n    if (\n      roleArgument.kind === ARGUMENT &&\n      roleArgument.name &&\n      roleArgument.name.kind === NAME &&\n      roleArgument.name.value &&\n      roleArgument.name.value !== ''\n    ) {\n      // define the new role\n      role.name = roleArgument.name.value;\n\n      // determine, if it is a 'userRole' or 'docRole'\n      const { roleType, roleName, roleFieldName } = getRoleType(\n        role.name,\n        inputSchema\n      );\n      role.type = roleType;\n      role.roleName = roleName;\n      role.roleFieldName = roleFieldName;\n\n      // create a default object, necessary for missing modes\n      role.modes = {};\n      CODE_MODES.forEach(mode => (role.modes[mode] = ''));\n\n      // check, if it is a list of values\n      if (\n        roleArgument.value.kind &&\n        roleArgument.value.kind === LIST_VALUE &&\n        roleArgument.value.values &&\n        roleArgument.value.values.length > 0\n      ) {\n        // get all authorized modes of the role\n        const roleModes = roleArgument.value.values;\n        roleModes.forEach(mode => {\n          // check, if it is a valid authorization mode\n          // e.g. 'create', 'update', 'delete', etc.\n          if (\n            mode.kind &&\n            mode.kind === STRING_VALUE &&\n            mode.value &&\n            MODES.indexOf(mode.value) >= 0\n          ) {\n            // it is a valid authorization mode:\n            // e.g.   {\n            //           name: 'admin',\n            //           type: null,      // later: => 'userRole' || 'docRole'\n            //           modes: {\n            //            create: 'admin',\n            //            readOne: 'admin',\n            //            readMany: 'admin',\n            //            update: 'admin',,\n            //            delete: 'admin',\n            //        }\n            //            'create' = 'admin'\n            // special case 'read' means both, 'readOne' and 'readMany'\n\n            if (mode.value === READ) {\n              role.modes[READ_ONE] = role.roleName;\n              role.modes[READ_MANY] = role.roleName;\n            } else {\n              role.modes[mode.value] = role.roleName;\n            }\n          }\n        });\n\n        // check, if it is a simple string value:\n      } else if (\n        roleArgument.name.value.kind &&\n        roleArgument.name.value.kind === STRING_VALUE &&\n        roleArgument.name.value &&\n        MODES.indexOf(roleArgument.name.value) >= 0\n      ) {\n        //                         'create' = 'admin'\n        // special case 'read' means both, 'readOne' and 'readMany'\n        if (roleArgument.name.value === READ) {\n          role.modes[READ_ONE] = role.roleName;\n          role.modes[READ_MANY] = role.roleName;\n        } else {\n          role.modes[roleArgument.name.value] = role.roleName;\n        }\n      }\n      // add it to the list of roles\n      allRoles.push(role);\n    }\n  });\n\n  return allRoles;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/extractRoles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "extractRoles",
    "memberof": "src/generate/extractRoles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/extractRoles.js~extractRoles",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/extractRoles.js",
    "importStyle": "{extractRoles}",
    "description": "extract the roles from the @authorize directive\nby reading the input schema's abstract syntax tree\nto get the roles and their authorized modes",
    "examples": [
      "         @authorize(\n           admin: [\"create\", \"read\", \"update\", \"delete\"]\n           this: [\"read\", \"update\", \"delete\"]\n         )"
    ],
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "allRolesArguments",
        "description": "AST with role definitions"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "the schema of the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "allRoles - returns the defined roles"
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/generate/generateAuthCodeModeCreate.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER, USER_MODEL } from '../constants';\nimport { prep } from './prep';\n\n/**\n * generate authorization code for mode create\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @param {array} userRoles - list of userRoles\n * @param {array} docRoles - list of docRoles\n * @param {string} roleFieldName - field name for the role\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthCodeModeCreate(\n  authorize: boolean = false,\n  typeName: string = '',\n  userRoles: Array<string> = [],\n  docRoles: Array<string> = [],\n  roleFieldName?: string = ''\n) {\n  // default code\n  let generatedCode = ``;\n\n  // with @authorize directive\n  if (authorize) {\n    if (typeName === USER_MODEL) {\n      // protectFields only on the user type\n      // if the fields are filled, than convert them to proper strings,\n      // otherwise set them to null\n      // take the first userRole into the protectFields as a suggestion\n      // to the programmer, assuming this is the most important role,\n      // with higher authorization (see in README.md)\n\n      const firstUserRole =\n        userRoles.length > 0 && userRoles[0] ? `'${userRoles[0]}'` : ``;\n\n      const roleField = roleFieldName ? `'${roleFieldName}'` : ``;\n\n      generatedCode = `checkAuthDoc(docToInsert, me, ${prep(userRoles)}, ${prep(\n        docRoles\n      )}, { ${USER}: this.context.${USER} }, authlog(resolver, 'create', me));\n      docToInsert = protectFields(me, [${firstUserRole}], [${roleField}], docToInsert, { ${USER}: this.context.${USER} });`;\n    } else {\n      // without protectFields\n      generatedCode = `checkAuthDoc(docToInsert, me, ${prep(userRoles)}, ${prep(\n        docRoles\n      )}, { ${USER}: this.context.${USER} }, authlog(resolver, 'create', me));`;\n    }\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthCodeModeCreate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "generateAuthCodeModeCreate",
    "memberof": "src/generate/generateAuthCodeModeCreate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthCodeModeCreate.js~generateAuthCodeModeCreate",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthCodeModeCreate.js",
    "importStyle": "{generateAuthCodeModeCreate}",
    "description": "generate authorization code for mode create",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleFieldName",
        "description": "field name for the role"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/generate/generateAuthCodeModeDelete.js",
    "content": "// @flow\n\nimport { USER } from '../constants';\nimport { prep } from './prep';\n\n/**\n * generate authorization code for mode delete\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} userRoles - list of userRoles\n * @param {string} docRoles - list of docRoles\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthCodeModeDelete(\n  authorize: boolean = false,\n  userRoles?: Array<string> = [],\n  docRoles?: Array<string> = []\n) {\n  // default code\n  let generatedCode = `const finalQuery = {...baseQuery};`;\n\n  // with @authorize directive\n  if (authorize) {\n    generatedCode = `const authQuery = queryForRoles(me, ${prep(\n      userRoles\n    )}, ${prep(\n      docRoles\n    )}, { ${USER}: this.context.${USER} }, authlog(resolver, 'delete', me));\n      const finalQuery = {...baseQuery, ...authQuery};`;\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthCodeModeDelete.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "generateAuthCodeModeDelete",
    "memberof": "src/generate/generateAuthCodeModeDelete.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthCodeModeDelete.js~generateAuthCodeModeDelete",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthCodeModeDelete.js",
    "importStyle": "{generateAuthCodeModeDelete}",
    "description": "generate authorization code for mode delete",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/generate/generateAuthCodeModeReadMany.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER } from '../constants';\nimport { prep } from './prep';\n\n/**\n * generate authorization code for mode readMany\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} userRoles - list of userRoles\n * @param {string} docRoles - list of docRoles\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthCodeModeReadMany(\n  authorize: boolean = false,\n  userRoles: Array<string> = [],\n  docRoles: Array<string> = []\n) {\n  // default code\n  let generatedCode = `const finalQuery = {...baseQuery, createdAt: { $gt: lastCreatedAt } };`;\n\n  // with @authorize directive\n  if (authorize) {\n    generatedCode = `const authQuery = queryForRoles(me, ${prep(\n      userRoles\n    )}, ${prep(\n      docRoles\n    )}, { ${USER}: this.context.${USER} }, authlog(resolver, 'readMany', me));\n      const finalQuery = {...baseQuery, ...authQuery, createdAt: { $gt: lastCreatedAt } };`;\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthCodeModeReadMany.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "generateAuthCodeModeReadMany",
    "memberof": "src/generate/generateAuthCodeModeReadMany.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthCodeModeReadMany.js~generateAuthCodeModeReadMany",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthCodeModeReadMany.js",
    "importStyle": "{generateAuthCodeModeReadMany}",
    "description": "generate authorization code for mode readMany",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/generate/generateAuthCodeModeReadOne.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER, USER_MODEL } from '../constants';\nimport { prep } from './prep';\n\n/**\n * generate authorization code for mode readOne\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @param {string} userRoles - list of userRoles\n * @param {string} docRoles - list of docRoles\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthCodeModeReadOne(\n  authorize: boolean = false,\n  typeName: string = '',\n  userRoles: Array<string> = [],\n  docRoles: Array<string> = []\n): string {\n  // default code\n  let generatedCode = `const { me } = context;\n    that.authorizedLoader = new DataLoader(ids => findByIds(this.collection, ids))`;\n\n  // with @authorize directive\n  if (authorize) {\n    if (typeName === USER_MODEL) {\n      // User has to come from current class context\n      generatedCode = `const { me } = context;\n      const authQuery = queryForRoles(me, ${prep(userRoles)}, ${prep(\n        docRoles\n      )}, { ${USER} }, authlog('${typeName} findOneById', 'readOne', me));\n      that.authorizedLoader = new DataLoader(ids => findByIds(this.collection, ids, authQuery));`;\n    } else {\n      // User has to come from this.context.${USER}\n      generatedCode = `const { me, ${USER} } = context;\n      const authQuery = queryForRoles(me, ${prep(userRoles)}, ${prep(\n        docRoles\n      )}, { ${USER} }, authlog('${typeName} findOneById', 'readOne', me));\n      that.authorizedLoader = new DataLoader(ids => findByIds(this.collection, ids, authQuery));`;\n    }\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthCodeModeReadOne.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "generateAuthCodeModeReadOne",
    "memberof": "src/generate/generateAuthCodeModeReadOne.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthCodeModeReadOne.js~generateAuthCodeModeReadOne",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthCodeModeReadOne.js",
    "importStyle": "{generateAuthCodeModeReadOne}",
    "description": "generate authorization code for mode readOne",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/generate/generateAuthCodeModeUpdate.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER, USER_MODEL } from '../constants';\nimport { prep } from './prep';\n\n/**\n * generate authorization code for mode update\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @param {array} userRoles - list of userRoles\n * @param {array} docRoles - list of docRoles\n * @param {string} roleFieldName - field name for the role\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthCodeModeUpdate(\n  authorize: boolean = false,\n  typeName: string = '',\n  userRoles?: Array<string> = [],\n  docRoles?: Array<string> = [],\n  roleFieldName?: string = ''\n) {\n  // default code\n  let generatedCode = `const finalQuery = {...baseQuery};`;\n\n  // with @authorize directive\n  if (authorize) {\n    if (typeName === USER_MODEL) {\n      // protectFields only on the user type\n      // if the fields are filled, than convert them to proper strings,\n      // otherwise set them to null\n      // take the first userRole into the protectFields\n      // as a suggestion to the programmer,\n      // assuming this is the most important role,\n      // with higher authorization (see in README.md)\n\n      const firstUserRole =\n        userRoles.length > 0 && userRoles[0] ? `'${userRoles[0]}'` : ``;\n\n      const roleField = roleFieldName ? `'${roleFieldName}'` : ``;\n\n      generatedCode = `const authQuery = queryForRoles(me, ${prep(\n        userRoles\n      )}, ${prep(\n        docRoles\n      )}, { ${USER}: this.context.${USER} }, authlog(resolver, 'update', me));\n      const finalQuery = {...baseQuery, ...authQuery};\n      docToUpdate.$set = protectFields(me, [${firstUserRole}], [${roleField}], docToUpdate.$set, { ${USER}: this.context.${USER} });`;\n    } else {\n      // without protectFields\n      generatedCode = `const authQuery = queryForRoles(me, ${prep(\n        userRoles\n      )}, ${prep(\n        docRoles\n      )}, { ${USER}: this.context.${USER} }, authlog(resolver, 'update', me));\n      const finalQuery = {...baseQuery, ...authQuery};`;\n    }\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthCodeModeUpdate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "generateAuthCodeModeUpdate",
    "memberof": "src/generate/generateAuthCodeModeUpdate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthCodeModeUpdate.js~generateAuthCodeModeUpdate",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthCodeModeUpdate.js",
    "importStyle": "{generateAuthCodeModeUpdate}",
    "description": "generate authorization code for mode update",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleFieldName",
        "description": "field name for the role"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/generate/generateAuthRoleDefinition.js",
    "content": "// @flow\n\nimport { USER, USER_MODEL } from '../constants';\n\n/**\n * generate updatedBy method\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthRoleDefinition(\n  authorize: boolean = false,\n  typeName: string = ''\n): string {\n  // default code\n  let generatedCode = ``;\n\n  // with @authorize directive: means there must be a User type\n  if (authorize && typeName === USER_MODEL) {\n    generatedCode = `\n    this.authRole = ${USER}.authRole;`;\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthRoleDefinition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "generateAuthRoleDefinition",
    "memberof": "src/generate/generateAuthRoleDefinition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthRoleDefinition.js~generateAuthRoleDefinition",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthRoleDefinition.js",
    "importStyle": "{generateAuthRoleDefinition}",
    "description": "generate updatedBy method",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/generate/generateAuthRoleMethod.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER_MODEL } from '../constants';\n\n/**\n * generate authRole() method only in type User\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @param {string} roleFieldName - field name, where userRole is stored on type User\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateAuthRoleMethod(\n  authorize: boolean = false,\n  typeName: string = '',\n  roleFieldName: string = ''\n): string {\n  // default code\n  let generatedCode = ``;\n\n  // with @authorize directive: means there must be a User type\n  if (authorize && roleFieldName !== '' && typeName === USER_MODEL) {\n    generatedCode = `\n  static authRole(${typeName}){\n    return (${typeName} && ${typeName}.${roleFieldName}) ? ${typeName}.${roleFieldName} : null;\n  }\n  `;\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthRoleMethod.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "generateAuthRoleMethod",
    "memberof": "src/generate/generateAuthRoleMethod.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthRoleMethod.js~generateAuthRoleMethod",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthRoleMethod.js",
    "importStyle": "{generateAuthRoleMethod}",
    "description": "generate authRole() method only in type User",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleFieldName",
        "description": "field name, where userRole is stored on type User"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/generate/generateAuthorizationCode.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { isAuthorizeDirectiveDefined } from './isAuthorizeDirectiveDefined';\nimport { getRoles } from './getRoles';\n\nimport { generateAuthCodeModeReadOne } from './generateAuthCodeModeReadOne';\nimport { generateAuthCodeModeReadMany } from './generateAuthCodeModeReadMany';\nimport { generateAuthCodeModeCreate } from './generateAuthCodeModeCreate';\nimport { generateAuthCodeModeUpdate } from './generateAuthCodeModeUpdate';\nimport { generateAuthCodeModeDelete } from './generateAuthCodeModeDelete';\nimport { generateCreatedBy } from './generateCreatedBy';\nimport { generateUpdatedBy } from './generateUpdatedBy';\nimport { generateAuthRoleDefinition } from './generateAuthRoleDefinition';\nimport { generateAuthRoleMethod } from './generateAuthRoleMethod';\n\n/**\n * generates authorization code\n * @public\n * @param {string} typeName - the name of the type\n * @param {object} inputSchema - the schema for that type\n * @return {Object} generatedCode - generated code\n * @property {string} generateAuthCodeModeReadOne - code for mode 'readOne'\n * @property {string} generateAuthCodeModeReadMany - code for mode 'readMany'\n * @property {string} generateAuthCodeModeCreate - code for mode 'create'\n * @property {string} generateAuthCodeModeUpdate - code for mode 'update'\n * @property {string} generateAuthCodeModeDelete - code for mode 'delete'\n * @property {string} generateCreatedBy - code for field createdBy\n * @property {string} generateUpdatedBy - code for field updatedBy\n * @property {string} generateAuthRoleDefinition - code for authRole definition\n * @property {string} generateAuthRoleMethod - code for authRole method in type User\n */\n\nexport function generateAuthorizationCode(\n  typeName: string = '',\n  inputSchema: any = {}\n): {\n  generateAuthCodeModeReadOne: string,\n  generateAuthCodeModeReadMany: string,\n  generateAuthCodeModeCreate: string,\n  generateAuthCodeModeUpdate: string,\n  generateAuthCodeModeDelete: string,\n  generateCreatedBy: string,\n  generateUpdatedBy: string,\n  generateAuthRoleDefinition: string,\n  generateAuthRoleMethod: string\n} {\n  const authorize = isAuthorizeDirectiveDefined(inputSchema);\n  const { userRoles, docRoles, roleFieldName } = getRoles(\n    authorize,\n    inputSchema\n  );\n  return {\n    generateAuthCodeModeReadOne: generateAuthCodeModeReadOne(\n      authorize,\n      typeName,\n      userRoles.readOne,\n      docRoles.readOne\n    ),\n    generateAuthCodeModeReadMany: generateAuthCodeModeReadMany(\n      authorize,\n      userRoles.readMany,\n      docRoles.readMany\n    ),\n    generateAuthCodeModeCreate: generateAuthCodeModeCreate(\n      authorize,\n      typeName,\n      userRoles.create,\n      docRoles.create,\n      roleFieldName\n    ),\n    generateAuthCodeModeUpdate: generateAuthCodeModeUpdate(\n      authorize,\n      typeName,\n      userRoles.update,\n      docRoles.update,\n      roleFieldName\n    ),\n    generateAuthCodeModeDelete: generateAuthCodeModeDelete(\n      authorize,\n      userRoles.delete,\n      docRoles.delete\n    ),\n    generateCreatedBy: generateCreatedBy(authorize, typeName),\n    generateUpdatedBy: generateUpdatedBy(authorize, typeName),\n    generateAuthRoleDefinition: generateAuthRoleDefinition(authorize, typeName),\n    generateAuthRoleMethod: generateAuthRoleMethod(\n      authorize,\n      typeName,\n      roleFieldName\n    )\n  };\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateAuthorizationCode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "generateAuthorizationCode",
    "memberof": "src/generate/generateAuthorizationCode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateAuthorizationCode.js~generateAuthorizationCode",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateAuthorizationCode.js",
    "importStyle": "{generateAuthorizationCode}",
    "description": "generates authorization code",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "the name of the type"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "the schema for that type"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthCodeModeReadOne",
        "description": "code for mode 'readOne'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthCodeModeReadMany",
        "description": "code for mode 'readMany'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthCodeModeCreate",
        "description": "code for mode 'create'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthCodeModeUpdate",
        "description": "code for mode 'update'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthCodeModeDelete",
        "description": "code for mode 'delete'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateCreatedBy",
        "description": "code for field createdBy"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateUpdatedBy",
        "description": "code for field updatedBy"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthRoleDefinition",
        "description": "code for authRole definition"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "generateAuthRoleMethod",
        "description": "code for authRole method in type User"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "generatedCode - generated code"
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/generate/generateCreatedBy.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER } from '../constants';\n\n/**\n * generate createdBy method\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateCreatedBy(\n  authorize: boolean = false,\n  typeName: string = ''\n): string {\n  // default code\n  let generatedCode = ``;\n\n  // with @authorize directive: means there must be a User type\n  if (authorize) {\n    generatedCode = `createdBy(${typeName}, me, resolver) {\n    return this.context.${USER}.findOneById(${typeName}.createdById, me, resolver);\n  }`;\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateCreatedBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "generateCreatedBy",
    "memberof": "src/generate/generateCreatedBy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateCreatedBy.js~generateCreatedBy",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateCreatedBy.js",
    "importStyle": "{generateCreatedBy}",
    "description": "generate createdBy method",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/generate/generateUpdatedBy.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport { USER } from '../constants';\n\n/**\n * generate updatedBy method\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {string} typeName - name of the type\n * @return {string} generatedCode - generated code to be injected\n */\n\nexport function generateUpdatedBy(\n  authorize: boolean = false,\n  typeName: string = ''\n): string {\n  // default code\n  let generatedCode = ``;\n\n  // with @authorize directive: means there must be a User type\n  if (authorize) {\n    generatedCode = `updatedBy(${typeName}, me, resolver) {\n    return this.context.${USER}.findOneById(${typeName}.updatedById, me, resolver);\n  }`;\n  }\n\n  return generatedCode;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/generateUpdatedBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "generateUpdatedBy",
    "memberof": "src/generate/generateUpdatedBy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/generateUpdatedBy.js~generateUpdatedBy",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/generateUpdatedBy.js",
    "importStyle": "{generateUpdatedBy}",
    "description": "generate updatedBy method",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": "name of the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "generatedCode - generated code to be injected"
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/generate/getFieldType.js",
    "content": "// @flow\n\nimport {\n  NAMED_TYPE,\n  NAME,\n  STRING,\n  USER,\n  NON_NULL_TYPE,\n  LIST_TYPE,\n  LIST_OF_STRINGS,\n  LIST_OF_USERS\n} from '../constants';\n\n/**\n * get the field's type \n * @private\n * @param {object} field - AST with field definitions\n * @return {type} fieldType - returns the type of the field\n * @example 'role: String'\n * @example 'role: String!'\n * @example 'coauthors: [User]'\n * @example 'coauthors: [User]!'\n * @example 'coauthors: [User!]'\n * @example 'coauthors: [User!]!'\n */\n\nexport function getFieldType(field: any): string | null {\n  // pattern: 'role: String'\n  if (\n    field.type &&\n    field.type.kind &&\n    field.type.kind === NAMED_TYPE &&\n    field.type.name &&\n    field.type.name.kind &&\n    field.type.name.kind === NAME &&\n    field.type.name.value\n  ) {\n    if (field.type.name.value === STRING) {\n      return STRING;\n    }\n\n    if (field.type.name.value === USER) {\n      return USER;\n    }\n  }\n\n  // pattern: 'role: String!'\n  if (\n    field.type &&\n    field.type.kind &&\n    field.type.kind === NON_NULL_TYPE &&\n    field.type.type &&\n    field.type.type.name &&\n    field.type.type.name.kind &&\n    field.type.type.name.kind === NAME &&\n    field.type.type.name.value\n  ) {\n    if (field.type.type.name.value === STRING) {\n      return STRING;\n    }\n\n    if (field.type.type.name.value === USER) {\n      return USER;\n    }\n  }\n\n  // pattern: 'coauthors: [User]'\n  if (\n    field.type &&\n    field.type.kind &&\n    field.type.kind === LIST_TYPE &&\n    field.type.type &&\n    field.type.type.name &&\n    field.type.type.name.kind &&\n    field.type.type.name.kind === NAME &&\n    field.type.type.name.value\n  ) {\n    if (field.type.type.name.value === STRING) {\n      return LIST_OF_STRINGS;\n    }\n\n    if (field.type.type.name.value === USER) {\n      return LIST_OF_USERS;\n    }\n  }\n\n  // pattern: 'coauthors: [User]!'\n  if (\n    field.type &&\n    field.type.kind &&\n    field.type.kind === NON_NULL_TYPE &&\n    field.type.type &&\n    field.type.type.kind &&\n    field.type.type.kind === LIST_TYPE &&\n    field.type.type.type &&\n    field.type.type.type.kind &&\n    field.type.type.type.kind === NAMED_TYPE &&\n    field.type.type.type.name &&\n    field.type.type.type.name.kind &&\n    field.type.type.type.name.kind === NAME &&\n    field.type.type.type.name.value\n  ) {\n    if (field.type.type.type.name.value === STRING) {\n      return LIST_OF_STRINGS;\n    }\n\n    if (field.type.type.type.name.value === USER) {\n      return LIST_OF_USERS;\n    }\n  }\n\n  // pattern: 'coauthors: [User!]'\n  if (\n    field.type &&\n    field.type.kind &&\n    field.type.kind === LIST_TYPE &&\n    field.type.type &&\n    field.type.type.kind &&\n    field.type.type.kind === NON_NULL_TYPE &&\n    field.type.type.type &&\n    field.type.type.type.kind &&\n    field.type.type.type.kind === NAMED_TYPE &&\n    field.type.type.type.name &&\n    field.type.type.type.name.kind &&\n    field.type.type.type.name.kind === NAME &&\n    field.type.type.type.name.value\n  ) {\n    if (field.type.type.type.name.value === STRING) {\n      return LIST_OF_STRINGS;\n    }\n\n    if (field.type.type.type.name.value === USER) {\n      return LIST_OF_USERS;\n    }\n  }\n\n  // pattern: 'coauthors: [User!]!'\n  if (\n    field.type &&\n    field.type.kind &&\n    field.type.kind === NON_NULL_TYPE &&\n    field.type.type &&\n    field.type.type.kind &&\n    field.type.type.kind === LIST_TYPE &&\n    field.type.type.type &&\n    field.type.type.type.kind &&\n    field.type.type.type.kind === NON_NULL_TYPE &&\n    field.type.type.type.type &&\n    field.type.type.type.type.kind &&\n    field.type.type.type.type.kind === NAMED_TYPE &&\n    field.type.type.type.type.name &&\n    field.type.type.type.type.name.kind &&\n    field.type.type.type.type.name.kind === NAME &&\n    field.type.type.type.type.name.value\n  ) {\n    if (field.type.type.type.type.name.value === STRING) {\n      return LIST_OF_STRINGS;\n    }\n\n    if (field.type.type.type.type.name.value === USER) {\n      return LIST_OF_USERS;\n    }\n  }\n\n  return null;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/getFieldType.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "getFieldType",
    "memberof": "src/generate/getFieldType.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/getFieldType.js~getFieldType",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/getFieldType.js",
    "importStyle": "{getFieldType}",
    "description": "get the field's type ",
    "examples": [
      "'role: String'",
      "'role: String!'",
      "'coauthors: [User]'",
      "'coauthors: [User]!'",
      "'coauthors: [User!]'",
      "'coauthors: [User!]!'"
    ],
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "AST with field definitions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "type"
      ],
      "spread": false,
      "description": "fieldType - returns the type of the field"
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/generate/getRoleType.js",
    "content": "// @flow\n\nimport {\n  USER_ROLE,\n  DOC_ROLE,\n  THIS,\n  FIELD_DEFINITION,\n  NAME,\n  STRING,\n  USER,\n  LIST_OF_STRINGS,\n  LIST_OF_USERS,\n  ID_FIELD,\n  ID_SINGULAR,\n  ID_PLURAL\n} from '../constants';\nimport { isRoleField } from './isRoleField';\nimport { getFieldType } from './getFieldType';\n\n/**\n * decide, if the given role is whether \n * a 'userRole' or a 'docRole'\n *\n * Procedure:\n * 1. Determine, if this field is used as a roleField\n * 2. Check, if this roleField...\n *    a) is of type: String or [String] ==> userRole\n *    b) is of type: User or [User]     ==> docRole\n *    c) roleName = 'this'              ==> docRole\n * 3. If there is no roleField in this type\n *    it must be a userRole\n * \n * For 1. is a roleField:\n *   read the type's abstract syntax tree\n *   loop over all provided fields,\n *   check, if the field has a directive '@authRole'\n *   and if this authRole is 'for' the provided 'roleName'\n *   or the roleName is the special case 'this'\n *   ==> then it is a roleField\n *\n * For 2. get it's fieldType:\n *   read the type's abstract syntax tree\n *   for the roleField and read it's type\n *   \n *   a) if it is a String or List of Strings,\n *   then the roleType = 'userRole'\n *\n *   b) if it is a User or List of Users (userIds),\n *   then the roleType = 'docType'\n *\n *   c) special case: roleName = 'this'\n *   (it doesn't look for an authRole for 'this')\n *   it means the document's id field is used for this\n *   meaning the role defines the authorizations,\n *   a User has upon his own User document\n *\n * For 3. none of the above applies\n *   so the role must be a userRole\n *   \n * @private\n * @param {string} name - name of the role\n * @param {object} inputSchema - the schema of the type\n * @return {Object} role - role definitions\n * @property {string} roleType - type of the role 'userRole', 'docRole'\n * @property {string} roleName - name of the role\n * @property {string} roleFieldName - field name for the userRole\n */\n\nexport function getRoleType(name: string = '', inputSchema: any = {}): any {\n  // all field definitions of the type\n  const allFields = inputSchema.definitions[0].fields;\n  let roleType = null;\n  let roleName = '';\n  let roleFieldName = '';\n\n  // special case 'this'\n  if (name === THIS) {\n    return {\n      roleType: DOC_ROLE,\n      roleName: ID_FIELD,\n      roleFieldName: ID_FIELD\n    };\n  }\n\n  // loop over all fields to find authRole directive\n  allFields.forEach(field => {\n    if (\n      field.kind &&\n      field.kind === FIELD_DEFINITION &&\n      field.name &&\n      field.name.kind &&\n      field.name.kind === NAME &&\n      field.name.value &&\n      field.directives &&\n      field.directives.length > 0\n    ) {\n      // 1. check, if it is a roleField\n      if (isRoleField(name, field.directives)) {\n        // 2. get the type of the field\n        const fieldType = getFieldType(field);\n        // determine the roleType: 'userRole' || 'docRole'\n        // and the roleName for...\n        // userRoles: 'admin', 'user',...\n        // docRoles: 'authorId', 'coAuthorsIds',...\n        switch (fieldType) {\n          case STRING:\n            // a) userRole\n            roleType = USER_ROLE;\n            roleName = name;\n            roleFieldName = field.name.value;\n            break;\n\n          case LIST_OF_STRINGS:\n            // a) userRole\n            roleType = USER_ROLE;\n            roleName = name;\n            roleFieldName = field.name.value;\n            break;\n\n          case USER:\n            // b) docRole\n            roleType = DOC_ROLE;\n            roleName = `${field.name.value}${ID_SINGULAR}`;\n            roleFieldName = field.name.value;\n            break;\n\n          case LIST_OF_USERS:\n            // b) docRole\n            roleType = DOC_ROLE;\n            roleName = `${field.name.value}${ID_PLURAL}`;\n            roleFieldName = field.name.value;\n            break;\n        }\n      }\n    }\n  });\n\n  if (roleType) {\n    // 2. a) userRole or b) docRole applies\n    return {\n      roleType,\n      roleName,\n      roleFieldName\n    };\n  } else if (name !== '') {\n    // 3. none of the above applies, so it must be a userRole\n    return {\n      roleType: USER_ROLE,\n      roleName: name,\n      roleFieldName: ''\n    };\n  }\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/getRoleType.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "getRoleType",
    "memberof": "src/generate/getRoleType.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/getRoleType.js~getRoleType",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/getRoleType.js",
    "importStyle": "{getRoleType}",
    "description": "decide, if the given role is whether \na 'userRole' or a 'docRole'\n\nProcedure:\n1. Determine, if this field is used as a roleField\n2. Check, if this roleField...\n   a) is of type: String or [String] ==> userRole\n   b) is of type: User or [User]     ==> docRole\n   c) roleName = 'this'              ==> docRole\n3. If there is no roleField in this type\n   it must be a userRole\n\nFor 1. is a roleField:\n  read the type's abstract syntax tree\n  loop over all provided fields,\n  check, if the field has a directive '@authRole'\n  and if this authRole is 'for' the provided 'roleName'\n  or the roleName is the special case 'this'\n  ==> then it is a roleField\n\nFor 2. get it's fieldType:\n  read the type's abstract syntax tree\n  for the roleField and read it's type\n  \n  a) if it is a String or List of Strings,\n  then the roleType = 'userRole'\n\n  b) if it is a User or List of Users (userIds),\n  then the roleType = 'docType'\n\n  c) special case: roleName = 'this'\n  (it doesn't look for an authRole for 'this')\n  it means the document's id field is used for this\n  meaning the role defines the authorizations,\n  a User has upon his own User document\n\nFor 3. none of the above applies\n  so the role must be a userRole\n  ",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the role"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "the schema of the type"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleType",
        "description": "type of the role 'userRole', 'docRole'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleName",
        "description": "name of the role"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleFieldName",
        "description": "field name for the userRole"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "role - role definitions"
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/generate/getRoles.js",
    "content": "// @flow\n\nimport { CODE_MODES, USER_ROLE, DOC_ROLE } from '../constants';\nimport { extractRoles } from './extractRoles';\n\n/**\n * get userRoles and docRoles\n * @private\n * @param {boolean} authorize - flag for authorization logic\n * @param {object} inputSchema - type's schema\n * @return {Object}\n * @property {object} userRoles - userRoles object with modes\n * @property {object} docRoles - docRoles object with modes\n * @property {string} roleFieldName - field containing the roles\n * }\n */\n\nexport function getRoles(authorize: boolean, inputSchema: any) {\n  // create empty userRoles and docRoles objects\n  // as default values, which are used\n  // if there is not @authorize directive\n  const userRoles = {};\n  const docRoles = {};\n  const roleFieldNamesFound = [];\n  CODE_MODES.forEach(mode => (userRoles[mode] = []));\n  CODE_MODES.forEach(mode => (docRoles[mode] = []));\n\n  // check if there is an @authorize directive\n  if (authorize) {\n    // then re-determine the userRoles and docRoles\n    // from the @authorize tag of the type definition\n    const allRolesArguments =\n      inputSchema.definitions[0].directives[0].arguments || {};\n    const allRoles = extractRoles(allRolesArguments, inputSchema);\n    allRoles.forEach(role => {\n      switch (role.type) {\n        case USER_ROLE:\n          // check, if there is already another userRole field\n          if (\n            roleFieldNamesFound.length > 0 &&\n            role.roleFieldName !== '' &&\n            roleFieldNamesFound.indexOf(role.roleFieldName) < 0\n          ) {\n            // We allow only one field which keeps all userRoles\n            throw new Error(`Please adjust type definition, that there is \n              only ONE field, which keeps all user roles. You've tried to \n              add a second userRole field: '${role.roleFieldName}',\n              but there is already another userRole field: \n              '${roleFieldNamesFound[0]}' defined.\n              Please try instead: '${roleFieldNamesFound[0]}: \n              String @authRole(for: [\"otherRole\", \"${role.roleName}\"])'`);\n          }\n          if (role.roleFieldName !== '') {\n            roleFieldNamesFound.push(role.roleFieldName);\n          }\n\n          Object.keys(role.modes).forEach(mode => {\n            if (role.modes[mode]) {\n              userRoles[mode].push(role.roleName);\n            }\n          });\n          break;\n\n        case DOC_ROLE:\n          Object.keys(role.modes).forEach(mode => {\n            if (role.modes[mode]) {\n              docRoles[mode].push(role.roleName);\n            }\n          });\n          break;\n      }\n    });\n  }\n\n  return {\n    userRoles,\n    docRoles,\n    roleFieldName: roleFieldNamesFound.length > 0 ? roleFieldNamesFound[0] : ''\n  };\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/getRoles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "getRoles",
    "memberof": "src/generate/getRoles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/getRoles.js~getRoles",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/getRoles.js",
    "importStyle": "{getRoles}",
    "description": "get userRoles and docRoles",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "authorize",
        "description": "flag for authorization logic"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "type's schema"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "userRoles object with modes"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "docRoles object with modes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleFieldName",
        "description": "field containing the roles\n}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/generate/isAuthorizeDirectiveDefined.js",
    "content": "// @flow\n\nimport { AUTHORIZE_DIRECTIVE } from '../constants';\n\n/**\n * checks, if there is authorization logic defined\n * true, if there is an @authorize directive in the header \n * in the type's inputSchema\n * if there is an @authorize directive => true\n * if thers is no @authorize directive => false\n * @public\n * @param {object} inputSchema - schema for the type\n * @return {boolean} authorized - true, if authorization logic defined\n */\n\nexport function isAuthorizeDirectiveDefined(inputSchema: any): boolean {\n  const authorized =\n    (inputSchema.definitions &&\n      inputSchema.definitions[0] &&\n      inputSchema.definitions[0].directives &&\n      inputSchema.definitions[0].directives[0] &&\n      inputSchema.definitions[0].directives[0].name &&\n      inputSchema.definitions[0].directives[0].name.value ===\n        AUTHORIZE_DIRECTIVE) ||\n    false;\n\n  return authorized;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/isAuthorizeDirectiveDefined.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "isAuthorizeDirectiveDefined",
    "memberof": "src/generate/isAuthorizeDirectiveDefined.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/isAuthorizeDirectiveDefined.js~isAuthorizeDirectiveDefined",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/isAuthorizeDirectiveDefined.js",
    "importStyle": "{isAuthorizeDirectiveDefined}",
    "description": "checks, if there is authorization logic defined\ntrue, if there is an @authorize directive in the header \nin the type's inputSchema\nif there is an @authorize directive => true\nif thers is no @authorize directive => false",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "schema for the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "authorized - true, if authorization logic defined"
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/generate/isRoleField.js",
    "content": "// @flow\n\nimport {\n  DIRECTIVE,\n  FOR,\n  NAME,\n  AUTH_ROLE,\n  STRING_VALUE,\n  LIST_VALUE\n} from '../constants';\n\n/*\n * is this field a roleField\n * check, if this field has the authRole directive\n * @private\n * @param {string} roleName - name of the role\n * @param {array} fieldDirectives  - AST with field directives\n * @return {boolean} isRoleField - true, if it is a field with a role\n */\n\nexport function isRoleField(roleName: string, fieldDirectives: any): boolean {\n  let found = false;\n\n  // loop over all field directives for an 'authRole'\n  fieldDirectives.forEach(fieldDirective => {\n    if (\n      fieldDirective.kind &&\n      fieldDirective.kind === DIRECTIVE &&\n      fieldDirective.name &&\n      fieldDirective.name.kind === NAME &&\n      fieldDirective.name.value === AUTH_ROLE &&\n      fieldDirective.arguments &&\n      fieldDirective.arguments.length > 0\n    ) {\n      // loop over all arguments, if it is for our roleName\n      // e.g. roleName: 'admin' find @authRole(for: [\"admin\"])\n      fieldDirective.arguments.forEach(fieldDirectiveArgument => {\n        // check, if there is a 'for'\n        if (\n          fieldDirectiveArgument.name &&\n          fieldDirectiveArgument.name.kind &&\n          fieldDirectiveArgument.name.kind === NAME &&\n          fieldDirectiveArgument.name.value &&\n          fieldDirectiveArgument.name.value === FOR &&\n          fieldDirectiveArgument.value &&\n          fieldDirectiveArgument.value.kind\n        ) {\n          // check, if it is a list value:\n          if (\n            fieldDirectiveArgument.value.kind === LIST_VALUE &&\n            fieldDirectiveArgument.value.values &&\n            fieldDirectiveArgument.value.values.length > 0\n          ) {\n            // loop over all values, if there is one with our roleName\n            const fieldRoles = fieldDirectiveArgument.value.values;\n            fieldRoles.forEach(fieldRole => {\n              // check, if it is our roleName\n              if (\n                fieldRole.kind &&\n                fieldRole.kind === STRING_VALUE &&\n                fieldRole.value &&\n                fieldRole.value !== '' &&\n                fieldRole.value === roleName\n              ) {\n                // we found it!\n                found = true;\n              }\n            });\n            // check, if it is a single value:\n          } else if (\n            fieldDirectiveArgument.value.kind === STRING_VALUE &&\n            fieldDirectiveArgument.value.value &&\n            fieldDirectiveArgument.value.value !== '' &&\n            fieldDirectiveArgument.value.value === roleName\n          ) {\n            // we found it!\n            found = true;\n          }\n        }\n      });\n    }\n  });\n  return found;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/isRoleField.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "isRoleField",
    "memberof": "src/generate/isRoleField.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/isRoleField.js~isRoleField",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/isRoleField.js",
    "importStyle": "{isRoleField}",
    "description": " ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roleName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldDirectives",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/generate/prep.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\n/**\n * prepare roles for code generator\n * convert array to String value\n * replace \" by '\n * @private\n * @param {array} role - name of role\n * @return {string} roleString - role string\n */\n\nexport function prep(role: any): string {\n  return JSON.stringify(role).replace(/\"/g, \"'\");\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/generate/prep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "prep",
    "memberof": "src/generate/prep.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/generate/prep.js~prep",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/generate/prep.js",
    "importStyle": "{prep}",
    "description": "prepare roles for code generator\nconvert array to String value\nreplace \" by '",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "role",
        "description": "name of role"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "roleString - role string"
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/index.js",
    "content": "/* eslint-disable max-len */\n\n/*\n * @desc create-graphql-server-authorization\n * @desc provides access to all public functions\n * @public\n * @param {function} getLogFilename - get name of log file\n * @param {function} dummyUserContext - get user.role\n * @param {function} logger - write to authorization log file\n * @param {function} authlog - how to log\n * @param {function} checkAuthDoc - checks, if authorized for document\n * @param {function} fieldContainsUserId - checks, if field contains user id\n * @param {function} findByIds - find documents with their ids, cached\n * @param {function} loggedIn - checks, if user logged in\n * @param {function} protectFields - protects fields for authorized users\n * @param {function} queryForRoles - creates authQuery for later data operations\n * @param {function} userRoleAuthorized - checks, if a user's role is authorized\n * @param {function} generateAuthorizationCode - generates authorization code during add-type\n * @param {function} isAuthorizeDirectiveDefined - returns true, if authorization logic is defined\n */\n\n/* for the authorization logic */\nexport { getLogFilename } from './lib/getLogFilename.js';\nexport { dummyUserContext } from './lib/dummyUserContext.js';\nexport { logger } from './lib/logger.js';\nexport { authlog } from './lib/authlog.js';\nexport { checkAuthDoc } from './lib/checkAuthDoc.js';\nexport { fieldContainsUserId } from './lib/fieldContainsUserId.js';\nexport { findByIds } from './lib/findByIds.js';\nexport { loggedIn } from './lib/loggedIn.js';\nexport { protectFields } from './lib/protectFields.js';\nexport { queryForRoles } from './lib/queryForRoles.js';\nexport { userRoleAuthorized } from './lib/userRoleAuthorized.js';\n\n/* for the code generator */\nexport {\n  generateAuthorizationCode\n} from './generate/generateAuthorizationCode.js';\nexport {\n  isAuthorizeDirectiveDefined\n} from './generate/isAuthorizeDirectiveDefined.js';\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/lib/authlog.js",
    "content": "// @flow\n\nimport { NO_USER } from '../constants';\nimport { logger } from './logger';\nimport { getLogFilename } from './getLogFilename';\n\n/**\n * Central logger for authorization checks\n * @public\n * @param {string} resolver - log name of a resolver\n * @param {string} mode - crud operation name\n * @param {object} me - current user\n * @return {Object} return - Object with two functions\n * @property {function} debug - debug() function\n * @property {function} error - error() function\n * @throws {Error} - throws Error message in the error() function\n * }\n */\n\nexport function authlog(\n  resolver: string = '',\n  mode: string = '',\n  me?: any = {}\n): { debug: any, error: any } {\n  const logFilename = getLogFilename();\n  const log = logger(logFilename);\n\n  const makeMessage = message =>\n    `Authorize ${mode} '${resolver}' with user '${me.username\n      ? me.username\n      : NO_USER}' ${message}`;\n\n  return {\n    debug: message => {\n      const resultMessage = makeMessage(message);\n      log.debug(resultMessage);\n      return resultMessage;\n    },\n    error: message => {\n      const resultMessage = makeMessage(message);\n      log.error(resultMessage);\n      throw new Error(makeMessage(message));\n    }\n  };\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/authlog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "authlog",
    "memberof": "src/lib/authlog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/authlog.js~authlog",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/authlog.js",
    "importStyle": "{authlog}",
    "description": "Central logger for authorization checks",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "resolver",
        "description": "log name of a resolver"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "crud operation name"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "current user"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "debug() function"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "error() function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "return - Object with two functions"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throws Error message in the error() function\n}"
      }
    ]
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/lib/checkAuthDoc.js",
    "content": "// @flow\n\nimport { userRoleAuthorized } from './userRoleAuthorized';\nimport { fieldContainsUserId } from './fieldContainsUserId';\nimport { authlog } from './authlog';\n\n// default logger, if there is none given\nconst defaultLogger = authlog();\n\n/**\n * Returns an authorized document\n * @public\n * @param {object} doc - any document to be checked\n * @param {object} me - current user\n * @param {array} userRoles - list of userRoles\n * @param {array} docRoles - list of docRoles\n * @param {object} User - model context of type User\n * @param {function} logger - the logger function\n * @return {object} doc - returns the authorized document\n * @throws {Error} - throws on a missing authorization\n */\n\nexport function checkAuthDoc(\n  doc: any = {},\n  me: any = {},\n  userRoles: Array<string> = [],\n  docRoles: Array<string> = [],\n  { User },\n  logger: any = defaultLogger\n): any {\n  const resultDoc = Object.assign({}, doc);\n\n  // get the User's role\n  const role = User.authRole(me);\n\n  // check if userRole entitles current user for this action\n  if (userRoleAuthorized(me, userRoles, { User }, logger)) {\n    logger.debug(`and role: '${role}' is authorized by userRole.`);\n    return resultDoc;\n  }\n\n  // check if docRole entitles current user for this document and action\n  let authorized = false;\n  docRoles.every(field => {\n    if (\n      resultDoc[field] &&\n      me._id &&\n      fieldContainsUserId(resultDoc[field], me._id)\n    ) {\n      authorized = true;\n    }\n  });\n  if (authorized) {\n    logger.debug(`and role: '${role}' is authorized by docRole.`);\n    return resultDoc;\n  }\n\n  // Not Authorized, throw exception in logger.error\n  logger.error(`and role: '${role}' is not authorized.`);\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/checkAuthDoc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "defaultLogger",
    "memberof": "src/lib/checkAuthDoc.js",
    "static": true,
    "longname": "src/lib/checkAuthDoc.js~defaultLogger",
    "access": "public",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/checkAuthDoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "checkAuthDoc",
    "memberof": "src/lib/checkAuthDoc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/checkAuthDoc.js~checkAuthDoc",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/checkAuthDoc.js",
    "importStyle": "{checkAuthDoc}",
    "description": "Returns an authorized document",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "any document to be checked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "current user"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "User",
        "description": "model context of type User"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "the logger function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "doc - returns the authorized document"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throws on a missing authorization"
      }
    ]
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/lib/dummyUserContext.js",
    "content": "// @flow\n\n/**\n * Returns a dummyUserContext\n * mocking User authRole, as it is not existing in this library\n * for usage in the test cases, where we don't have an original \n * User model context\n * @public\n * @return {object} dummyUserContext - returns user.role || null\n */\n\nexport const dummyUserContext = {\n  authRole(user) {\n    return user && user.role ? user.role : null;\n  }\n};\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/dummyUserContext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "dummyUserContext",
    "memberof": "src/lib/dummyUserContext.js",
    "static": true,
    "longname": "src/lib/dummyUserContext.js~dummyUserContext",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/dummyUserContext.js",
    "importStyle": "{dummyUserContext}",
    "description": "Returns a dummyUserContext\nmocking User authRole, as it is not existing in this library\nfor usage in the test cases, where we don't have an original \nUser model context",
    "lineNumber": 12,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "dummyUserContext - returns user.role || null"
    },
    "type": {
      "types": [
        "{\"authRole\": function}"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/lib/fieldContainsUserId.js",
    "content": "// @flow\n/* eslint-disable max-len */\n\nimport _ from 'lodash';\n\n/**\n * extracts a UserId from an _id object\n * @private\n * @param {object} userIdObject - user object\n * @return {string} newUserId - id of the user\n */\n\nfunction extractUserId(userIdObject: any): any {\n  let newUserId = '';\n  if (_.isObject(userIdObject)) {\n    Object.keys(userIdObject).forEach(field => {\n      newUserId = userIdObject[field];\n    });\n  } else {\n    newUserId = userIdObject;\n  }\n  return newUserId;\n}\n\n/**\n * checks, if a field contains a user's id\n * returns true, if a field of type array/object/string contains the userId\n * @public\n * @param {object} docRoleField - the field to be checked\n * @param {object} compressedUserId - the user id to test\n * @return {boolean} found - true if it contains the user id\n */\n\nexport function fieldContainsUserId(\n  docRoleField: any,\n  compressedUserId: any\n): boolean {\n  let found = false;\n\n  // empty docRoleField is not a valid docRoleField\n  if (!docRoleField || docRoleField === '' || docRoleField.length === 0) {\n    return false;\n  }\n\n  // empty (compressed) userId is not a valid userId\n  if (\n    !compressedUserId ||\n    compressedUserId === '' ||\n    compressedUserId.toString() === ''\n  ) {\n    return false;\n  }\n\n  // extract userId, if it is a mongoID field\n  const userId = extractUserId(compressedUserId);\n\n  // empty (uncompressed) userId is not a valid userId\n  if (!userId || userId === '') {\n    return false;\n  }\n\n  // docRoleField of type Array\n  if (_.isArray(docRoleField)) {\n    docRoleField.forEach(field => {\n      if (fieldContainsUserId(field, userId)) {\n        found = true;\n      }\n    });\n    if (found) {\n      return true;\n    }\n    return false;\n  }\n\n  // docRoleField of type Object\n  if (_.isObject(docRoleField)) {\n    // For each field in the object\n    Object.keys(docRoleField).forEach(field => {\n      if (\n        fieldContainsUserId(docRoleField[field], userId) ||\n        fieldContainsUserId(field, userId)\n      ) {\n        found = true;\n      }\n    });\n    if (found) {\n      return true;\n    }\n    return false;\n  }\n\n  // docRoleField of type field\n  if (docRoleField.toString() === userId.toString()) {\n    return true;\n  }\n\n  return false;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/fieldContainsUserId.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "extractUserId",
    "memberof": "src/lib/fieldContainsUserId.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/fieldContainsUserId.js~extractUserId",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/fieldContainsUserId.js",
    "importStyle": null,
    "description": "extracts a UserId from an _id object  ",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userIdObject",
        "description": "user object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "fieldContainsUserId",
    "memberof": "src/lib/fieldContainsUserId.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/fieldContainsUserId.js~fieldContainsUserId",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/fieldContainsUserId.js",
    "importStyle": "{fieldContainsUserId}",
    "description": "checks, if a field contains a user's id\nreturns true, if a field of type array/object/string contains the userId",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoleField",
        "description": "the field to be checked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "compressedUserId",
        "description": "the user id to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "found - true if it contains the user id"
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/lib/findByIds.js",
    "content": "// @flow\n\n/** \n * Finds records by ids (cached with dataloader)\n * returns the record, checks authorization if set\n * enhancement of tmeasday'findByIds\n * @public\n * @param {object} collection - data model type collection\n * @param {array} ids - one or a list of document ids\n * @param {object} authQuery - authorization query to be used to access data\n * @return {array} documents - the found documents with these ids\n */\n\nexport function findByIds(\n  collection: any,\n  ids: Array<any> = [],\n  authQuery?: any = {}\n): any {\n  const baseQuery = { _id: { $in: ids } };\n  const finalQuery = { ...baseQuery, ...authQuery };\n  return collection.find(finalQuery).toArray().then(docs => {\n    const idMap = {};\n    docs.forEach(d => {\n      idMap[d._id] = d;\n    });\n    return ids.map(id => idMap[id]);\n  });\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/findByIds.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "findByIds",
    "memberof": "src/lib/findByIds.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/findByIds.js~findByIds",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/findByIds.js",
    "importStyle": "{findByIds}",
    "description": "Finds records by ids (cached with dataloader)\nreturns the record, checks authorization if set\nenhancement of tmeasday'findByIds",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "data model type collection"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "one or a list of document ids"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "authQuery",
        "description": "authorization query to be used to access data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "documents - the found documents with these ids"
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/lib/getLogFilename.js",
    "content": "// @flow\n\nimport path from 'path';\n\nconst expect = require('chai').expect;\n\n/**\n * Get name for the log file\n * reads package.json for config.logfile variable\n * @public\n * @return (string) logFilename - path and file name for the log file\n */\n\nexport function getLogFilename(): string {\n  const logFilename = path.normalize(process.env.npm_package_config_logfile);\n  expect(logFilename).be.a('string');\n  return logFilename;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/getLogFilename.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "expect",
    "memberof": "src/lib/getLogFilename.js",
    "static": true,
    "longname": "src/lib/getLogFilename.js~expect",
    "access": "public",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/getLogFilename.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "getLogFilename",
    "memberof": "src/lib/getLogFilename.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/getLogFilename.js~getLogFilename",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/getLogFilename.js",
    "importStyle": "{getLogFilename}",
    "description": "Get name for the log file\nreads package.json for config.logfile variable",
    "lineNumber": 14,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "(string) logFilename - path and file name for the log file"
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/lib/loggedIn.js",
    "content": "// @flow\n\n/**\n * Checks, if an user is logged in\n * @param {object} me - current user\n * @return {boolean} loggedIn - true, if user is logged in\n */\n\nexport function loggedIn(me: any): boolean {\n  if (me && me._id && me._id.toString() !== '') {\n    return true;\n  }\n  return false;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/loggedIn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "loggedIn",
    "memberof": "src/lib/loggedIn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/loggedIn.js~loggedIn",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/loggedIn.js",
    "importStyle": "{loggedIn}",
    "description": "Checks, if an user is logged in",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "current user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "loggedIn - true, if user is logged in"
    }
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/lib/logger.js",
    "content": "// @flow\n\nimport { LOG_LEVEL, LOG_MAX_FILES, LOG_MAX_SIZE } from '../constants';\nimport winston from 'winston';\n\nwinston.emitErrs = true;\n\n/**\n * create timestamps in local format\n * @private\n * @return {string} timestamp - current time stamp in local format\n */\n\nconst timestamp = function(): string {\n  return new Date(Date.now()).toLocaleString();\n};\n\n/**\n * formats the output message string\n * @private\n * @param {object} options - options timestamp, message, meta, level\n * @return {string} message - prepares output message\n */\n\nconst formatter = function(options: any): string {\n  return (\n    options.timestamp() +\n    ' ' +\n    (options.level === 'error' ? ' ' + options.level.toUpperCase() : '') +\n    ' ' +\n    (options.message ? options.message : '') +\n    (options.meta && Object.keys(options.meta).length\n      ? '\\n\\t' + JSON.stringify(options.meta)\n      : '')\n  );\n};\n\n/**\n * Creates a logger based on winston\n * @public\n * @param {string} filename - log file name\n * @return {function} logger - logger function\n */\n\nexport function logger(filename: string): any {\n  const logLevel = process.env.npm_package_config_loglevel || LOG_LEVEL;\n  const maxSize = process.env.npm_package_config_maxsize || LOG_MAX_SIZE;\n  const maxFiles = process.env.npm_package_config_maxfiles || LOG_MAX_FILES;\n  return new winston.Logger({\n    transports: [\n      new winston.transports.File({\n        level: logLevel,\n        filename,\n        handleExceptions: true,\n        json: false,\n        maxsize: maxSize * 1024 * 1024, // e.g. 5MB\n        maxFiles,\n        colorize: false,\n        timestamp,\n        formatter\n      }),\n\n      new winston.transports.Console({\n        level: logLevel,\n        handleExceptions: true,\n        json: false,\n        colorize: true,\n        timestamp,\n        formatter\n      })\n    ],\n\n    exitOnError: false\n  });\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "timestamp",
    "memberof": "src/lib/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/logger.js~timestamp",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/logger.js",
    "importStyle": null,
    "description": "create timestamps in local format",
    "lineNumber": 14,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "timestamp - current time stamp in local format"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "formatter",
    "memberof": "src/lib/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/logger.js~formatter",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/logger.js",
    "importStyle": null,
    "description": "formats the output message string",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options timestamp, message, meta, level"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "message - prepares output message"
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "logger",
    "memberof": "src/lib/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/logger.js~logger",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/logger.js",
    "importStyle": "{logger}",
    "description": "Creates a logger based on winston",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "log file name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "logger - logger function"
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/lib/protectFields.js",
    "content": "// @flow\n\nimport { dummyUserContext } from './dummyUserContext';\n\n/**\n * Protects a field based on authorizations\n * @public\n * @param {object} me - current user\n * @param {array} authorizedUserRoles - userRoles with authorization\n * @param {array} protectedFields - list of fields only for these userRoles\n * @param {object} inputObject - document with might contain those fields\n * @param {object} User - model context for type User\n * @return {object} result - document with or without the protected fields\n */\n\nexport function protectFields(\n  me: any = {},\n  authorizedUserRoles: Array<string> = [],\n  protectedFields: Array<string> = [],\n  inputObject: any = {},\n  { User } = { User: dummyUserContext }\n): any {\n  // pure function\n  const result = Object.assign({}, inputObject);\n\n  // getting role of current User\n  const role = User.authRole(me);\n\n  // if user is not allowed to access specific fields,\n  // remove field from object...\n  if (!authorizedUserRoles.includes(role)) {\n    protectedFields.forEach(protectedField => {\n      if (result[protectedField]) {\n        delete result[protectedField];\n      }\n    });\n  }\n\n  return result;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/protectFields.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "protectFields",
    "memberof": "src/lib/protectFields.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/protectFields.js~protectFields",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/protectFields.js",
    "importStyle": "{protectFields}",
    "description": "Protects a field based on authorizations",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "current user"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "authorizedUserRoles",
        "description": "userRoles with authorization"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "protectedFields",
        "description": "list of fields only for these userRoles"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputObject",
        "description": "document with might contain those fields"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "User",
        "description": "model context for type User"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "result - document with or without the protected fields"
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/lib/queryForRoles.js",
    "content": "/* eslint-disable max-len */\n// @flow\n\nimport { NO_ROLE } from '../constants';\nimport { userRoleAuthorized } from './userRoleAuthorized';\nimport { dummyUserContext } from './dummyUserContext';\nimport { loggedIn } from './loggedIn';\nimport { authlog } from './authlog';\n\nconst defaultLogger = authlog();\n\n/**\n * Prepare a query object for mongodb operations with authorization queries\n * creates an authQuery object with additional \n * query arguments, to implement authorization restrictions for mongodb access\n * @public\n * @param {object} me - current user\n * @param {array} userRoles - list of userRoles\n * @param {array} docRoles - list of docRoles\n * @param {object} User - model context for type User\n * @param {object} logger - logger function\n * @return {object} authQuery - authQuery for data operations\n * @example \n *   const authQuery = \n *     queryForRoles(me, userRoles, docRoles, { User }, authlog(resolver, mode, me ) );\n */\n\nexport function queryForRoles(\n  me: any = {},\n  userRoles: Array<string> = [],\n  docRoles: Array<string> = [],\n  { User } = { User: dummyUserContext },\n  logger: any = defaultLogger\n): any {\n  // get current User's role\n  const role = User.authRole(me);\n\n  // Build query for the case: The logged in user's role is authorized\n  if (userRoleAuthorized(me, userRoles, { User }, logger)) {\n    // empty authQuery means, do operation with no access restrictions\n    return {};\n  }\n\n  // Build query for the case: The user is listed in any document field\n  const query = { $or: [] };\n  // makes only sense, if user is logged in - otherwise no userId\n  if (loggedIn(me)) {\n    // prepare selection criterias as 'authQuery' object\n    // for later mongodb 'find(...baseQuery,  ...authQuery)'\n    //                               ...  AND ...{ field1 OR field2}\n    // which will be also considered during the database access\n    // as an '$or: [ { field1: userId}, { field2: userId} ]'\n    // with all document roles as fields for the later selection.\n    // At least one of those fields must match the userId,\n    // otherwise, whether no data found or not authorized to access data\n    docRoles.forEach(docRole => query.$or.push({ [docRole]: me._id }));\n    // return this authQuery only, if there was at least 1 field added\n    // otherwise it will result in an unlimited access\n    if (query.$or.length > 0) {\n      // for easier debugging write into the authorzation logs\n      logger.debug(\n        `and role: '${role ? role : NO_ROLE}' with \n        authQuery: ${JSON.stringify(query, null, 2)}`\n      );\n      // return the query as authQuery for later selection\n      return query;\n    }\n  }\n\n  // Not Authorized - throw exception in logger.error\n  const message = `and role: '${role}' is not authorized.`;\n  logger.error(message);\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/queryForRoles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "defaultLogger",
    "memberof": "src/lib/queryForRoles.js",
    "static": true,
    "longname": "src/lib/queryForRoles.js~defaultLogger",
    "access": "public",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/queryForRoles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "queryForRoles",
    "memberof": "src/lib/queryForRoles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/queryForRoles.js~queryForRoles",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/queryForRoles.js",
    "importStyle": "{queryForRoles}",
    "description": "Prepare a query object for mongodb operations with authorization queries\ncreates an authQuery object with additional \nquery arguments, to implement authorization restrictions for mongodb access",
    "examples": [
      "  const authQuery = \n    queryForRoles(me, userRoles, docRoles, { User }, authlog(resolver, mode, me ) );"
    ],
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "current user"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "docRoles",
        "description": "list of docRoles"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "User",
        "description": "model context for type User"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "logger function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "authQuery - authQuery for data operations"
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/lib/userRoleAuthorized.js",
    "content": "// @flow\n\nimport { WORLD, NO_ROLE } from '../constants';\nimport { dummyUserContext } from './dummyUserContext';\nimport { authlog } from './authlog';\n\nconst defaultLogger = authlog();\n\n/**\n * Is a user's role authorized for a document\n * You can use also the role 'world', to authorize everyone\n * @public\n * @param {object} me - current user\n * @param {array} userRoles - list of userRoles\n * @param {object} User - model context for type User\n * @param {object} logger - logger function\n * @return {boolean} authorized - true, if userRole is authorized\n */\n\nexport function userRoleAuthorized(\n  me: any = {},\n  userRoles: Array<string> = [],\n  { User } = { User: dummyUserContext },\n  logger: any = defaultLogger\n): boolean {\n  // get current User's role\n  const role = User.authRole(me);\n\n  // determine, if the given userRoles authorize the current User by its role\n  if (\n    // userRole: 'world' should authorize everyone - known and unknown users\n    userRoles.includes(WORLD) ||\n    // or there must be a userRole given, and current user must have a role\n    // and the current user's role must be in the given userRoles\n    (role && role !== '' && userRoles.length > 0 && userRoles.includes(role))\n  ) {\n    // => authorized\n    logger.debug(`and role '${role ? role : NO_ROLE}' is authorized`);\n    return true;\n  }\n\n  // => not authorized\n  return false;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/src/lib/userRoleAuthorized.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "defaultLogger",
    "memberof": "src/lib/userRoleAuthorized.js",
    "static": true,
    "longname": "src/lib/userRoleAuthorized.js~defaultLogger",
    "access": "public",
    "export": false,
    "importPath": "create-graphql-server-authorization/src/lib/userRoleAuthorized.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "userRoleAuthorized",
    "memberof": "src/lib/userRoleAuthorized.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/userRoleAuthorized.js~userRoleAuthorized",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-authorization/src/lib/userRoleAuthorized.js",
    "importStyle": "{userRoleAuthorized}",
    "description": "Is a user's role authorized for a document\nYou can use also the role 'world', to authorize everyone",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "current user"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "userRoles",
        "description": "list of userRoles"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "User",
        "description": "model context for type User"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "logger function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "authorized - true, if userRole is authorized"
    }
  },
  {
    "kind": "index",
    "content": "[![npm version](https://badge.fury.io/js/create-graphql-server-authorization.svg)](http://badge.fury.io/js/create-graphql-server-authorization) [![Build Status](https://travis-ci.org/tobkle/create-graphql-server-authorization.svg?branch=master)](https://travis-ci.org/tobkle/create-graphql-server-authorization) [![Coverage Status](https://coveralls.io/repos/github/tobkle/create-graphql-server-authorization/badge.svg?branch=master)](https://coveralls.io/github/tobkle/create-graphql-server-authorization?branch=master)\n\n# create-graphql-server-authorization\n\nAdds Authorization Logic to the GraphQL-Server-Generator: **create-graphql-server**.\n\nIf you are using create-grapqhl-server, you come to a point, when you need some kind of authorization on your GraphQL server. This package provides a possible way to do authorization checks.\n\nTherefore it enhances the type schema with two additional GraphQL directives:\n* @authorize\n* @authRole\n\nUse these two directives in your GraphQL type definitions. Then use the ```create-graphql-server add-type <your-type>``` command to generate the according GraphQL server code with already injected generated authorization logic code.\n\n## Usage\nIt provides Authorization checks for type authorization.\n\nIt adds the two GraphQL directives @authorize and @authRole to the create-graphql-server type system e.g.:\n```javascript\ntype User\n@authorize(\n  admin: [\"create\", \"read\", \"update\", \"delete\"],\n  this: [\"readOne\", \"update\", \"delete\"]\n)\n{\n  username: String!\n  role: String! @authRole(for: [\"admin\"]) \n  bio: String!\n}\n```\n\n## Installation\n```bash\ngit clone git@github.com:tmeasday/create-graphql-server.git\ncd create-graphql-server\nyarn add create-graphql-server-authorization\n```\n\nAdd it to the generator files here:\n* generate/model/index.js [Mandatory]\n* generate/schema/index.js [Optional]\n\nIn the Model generator you can use it, to generate authorization code which is then injected in the Model methods of the types:\n```javascript\nimport { generateAuthorizationCode } from 'create-graphql-server-authorization';\n...\nexport function generateModelAst(inputSchema) {\n  const type = inputSchema.definitions[0];\n  const TypeName = type.name.value;\n  const typeName = lcFirst(TypeName);\n\n  const ast = generators.base({ \n    TypeName,\n    typeName,\n    ...generateAuthorizationCode( typeName, inputSchema )\n  });\n\n  ...\n}\n...\n```\n\nIt generates authorization code for the following **tags**...\n* generateAuthCodeModeReadOne\n* generateAuthCodeModeReadMany\n* generateAuthCodeModeCreate\n* generateAuthCodeModeUpdate\n* generateAuthCodeModeDelete\n* generateCreatedBy\n* generateUpdatedBy\n* generateAuthRoleDefinition\n* generateAuthRoleMethod\n\nInsert those tags at the appropriate places in the /generate/model/templates/... files.\n\nFor example:\nIf you want to use authorization logic in the update mutation: Add the tag **generateAuthCodeModeUpdate** into the /generate/model/templates/base.js.template file like so:\n\n```javascript\n...\nimport { findByIds, queryForRoles, getLogFilename, logger, authlog, checkAuthDoc, protectFields } from 'create-graphql-server-authorization';\n...\n\nasync updateById(id, doc, me, resolver) {\n  try {\n    let docToUpdate = {$set: Object.assign({}, doc, {\n          updatedAt: Date.now(),\n          updatedById: (me && me._id) ? me._id : 'unknown',\n    })};\n    const baseQuery = {_id: id};\n\n\t// here at this location:\n    generateAuthCodeModeUpdate\n\n    const result = await this.collection.updateOne(finalQuery, docToUpdate);\n    if (result.result.ok !== 1 || result.result.n !== 1){\n      throw new Error(`update typeName not possible for ${id}.`);\n    }\n    log.debug(`updated typeName ${id}.`);\n    this.authorizedLoader.clear(id);\n    const updatedDoc = this.findOneById(id, me, 'pubsub typeNameUpdated');\n    this.pubsub.publish('typeNameUpdated', updatedDoc);\n    return updatedDoc;\n  } catch (err) { log.error(err.message); }\n}\n\n...\n```\n\nHere is a complete example file for generate/model/templates/base.js.template:\n```javascript\nimport DataLoader from 'dataloader';\nimport { findByIds, queryForRoles, getLogFilename, logger, authlog, checkAuthDoc, protectFields } from 'create-graphql-server-authorization';\nconst log = logger(getLogFilename());\n\nexport default class TypeName {\n  constructor(context) {\n    this.context = context;\n    this.collection = context.db.collection('typeName');\n    this.pubsub = context.pubsub;generateAuthRoleDefinition\n    const that = this;\n    try {\n      generateAuthCodeModeReadOne\n    } catch (err) { log.error(err.message); }\n  }\n  generateAuthRoleMethod\n  async findOneById(id, me, resolver) {\n    try {\n      if (!this.authorizedLoader) return null;\n      return await this.authorizedLoader.load(id);\n    } catch (err) { log.error(err.message); }\n  }\n\n  find({ lastCreatedAt = 0, limit = 10, baseQuery = {} }, me, resolver) {\n    try {\n      generateAuthCodeModeReadMany\n      return this.collection.find(finalQuery).sort({ createdAt: 1 }).limit(limit).toArray();\n    } catch (err) { log.error(err.message); }\n  }\n\n  generateCreatedBy\n\n  generateUpdatedBy\n\n  async insert(doc, me, resolver) {\n    try {\n      let docToInsert = Object.assign({}, doc, {\n        createdAt: Date.now(),\n        updatedAt: Date.now(),\n        createdById: (me && me._id) ? me._id : 'unknown',\n        updatedById: (me && me._id) ? me._id : 'unknown',\n      });\n      generateAuthCodeModeCreate\n      const id = (await this.collection.insertOne(docToInsert)).insertedId;\n      if (!id) {\n        throw new Error(`insert typeName not possible.`);\n      }\n      log.debug(`inserted typeName ${id}.`);\n      const insertedDoc = this.findOneById(id, me, 'pubsub typeNameInserted');\n      this.pubsub.publish('typeNameInserted', insertedDoc);\n      return insertedDoc;\n    } catch (err) { log.error(err.message); }\n  }\n\n  async updateById(id, doc, me, resolver) {\n    try {\n      let docToUpdate = {$set: Object.assign({}, doc, {\n            updatedAt: Date.now(),\n            updatedById: (me && me._id) ? me._id : 'unknown',\n      })};\n      const baseQuery = {_id: id};\n      generateAuthCodeModeUpdate\n      const result = await this.collection.updateOne(finalQuery, docToUpdate);\n      if (result.result.ok !== 1 || result.result.n !== 1){\n        throw new Error(`update typeName not possible for ${id}.`);\n      }\n      log.debug(`updated typeName ${id}.`);\n      this.authorizedLoader.clear(id);\n      const updatedDoc = this.findOneById(id, me, 'pubsub typeNameUpdated');\n      this.pubsub.publish('typeNameUpdated', updatedDoc);\n      return updatedDoc;\n    } catch (err) { log.error(err.message); }\n  }\n\n  async removeById(id, me, resolver) {\n    try {\n      const baseQuery = {_id: id};\n      generateAuthCodeModeDelete\n      const result = await this.collection.remove(finalQuery);\n      if (result.result.ok !== 1 || result.result.n !== 1){\n        throw new Error(`remove typeName not possible for ${id}.`);\n      }\n      log.debug(`removed typeName ${id}.`);\n      this.authorizedLoader.clear(id);\n      this.pubsub.publish('typeNameRemoved', id);\n      return result;\n    } catch (err) { log.error(err.message); }\n  }\n\n}\n```\n\nAdditional references for this module **create-graphql-server-authorization** in the create-graphql-server are here:\n* /skel/server/authenticate.js [uses: findByIds]\n* /skel/server/index.js [uses: getLogFilename, logger]\n\nSo if you are replacing **create-graphql-server-authorization** by your own forked version of this module, please don't forget the other two references, or just keep the original version in your package.json.\n\n### Option\nIn the Schema generator you can use it as an option for example, to generate two fields createdBy and updatedBy only if there is a user type and authorization setup:\n```javascript \nimport { isAuthorizeDirectiveDefined } from 'create-graphql-server-authorization';\n...\nconst authorize = isAuthorizeDirectiveDefined(outputSchema);\n...\n// for safety reasons:\n// only with @authorize we know that there is a \"User\" type defined\nif (authorize){\n  type.fields.push(buildField('createdBy', [], 'User'));\n  type.fields.push(buildField('updatedBy', [], 'User'));\n}\n...\n```\n\n## Documentation\n[API Documentation](https://tobkle.github.io/create-graphql-server-authorization/)\n\n## Tests\n```bash\nyarn test\n```\n\n## Contributing\nIn lieu of a formal style guide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code.\n\n",
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"create-graphql-server-authorization\",\n  \"version\": \"0.0.32\",\n  \"description\": \"Authorization package for create-graphql-server\",\n  \"contributors\": [\n    \"Tobias Klemmer <tobias@klemmer.info> (https://www.klemmer.info)\"\n  ],\n  \"main\": \"index.js\",\n  \"author\": \"Tobias Klemmer <tobias@klemmer.info> (https://www.klemmer.info)\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/tobkle/create-graphql-server-authorization.git\"\n  },\n  \"keywords\": [\n    \"create-graphql-server\",\n    \"authorization\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/tobkle/create-graphql-server-authorization/issues\"\n  },\n  \"config\": {\n    \"logfile\": \"log/all-logs-readable.log\",\n    \"loglevel\": \"debug\",\n    \"maxsize\": 5,\n    \"maxfiles\": 5\n  },\n  \"options\": {\n    \"mocha\": \"--require ./resources/mocha-bootload --check-leaks --full-trace src/**/__tests__/**/*-test.js\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run check && npm run testonly\",\n    \"testonly\": \"babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha\",\n    \"t\": \"babel-node ./node_modules/.bin/_mocha --require ./resources/mocha-bootload\",\n    \"lint\": \"eslint --fix src || (printf '\\\\033[33mTry: \\\\033[7m npm run lint -- --fix \\\\033[0m\\\\n' && exit 1)\",\n    \"check\": \"flow check\",\n    \"check-cover\": \"for file in {src/*.js,src/**/*.js}; do echo $file; flow coverage $file; done\",\n    \"build\": \"babel src --optional runtime --ignore __tests__ --out-dir dist/ && cp package.json dist/ && npm run build-dot-flow\",\n    \"build-dot-flow\": \"find ./src -name '*.js' -not -path '*/__tests__*' | while read filepath; do cp $filepath `echo $filepath | sed 's/\\\\/src\\\\//\\\\/dist\\\\//g'`.flow; done\",\n    \"watch\": \"babel-node ./resources/watch.js\",\n    \"cover\": \"babel-node ./node_modules/.bin/isparta cover --root src --report html _mocha -- $npm_package_options_mocha\",\n    \"cover:lcov\": \"babel-node ./node_modules/.bin/isparta cover --root src --report lcovonly _mocha -- $npm_package_options_mocha\",\n    \"preversion\": \". ./resources/checkgit.sh && npm test\",\n    \"prepublish\": \". ./resources/prepublish.sh\",\n    \"gitpublish\": \". ./resources/gitpublish.sh\",\n    \"prettier\": \"node_modules/.bin/prettier src/**/**/*.js --write\",\n    \"esdoc\": \"node_modules/.bin/esdoc -c .esdoc.json\"\n  },\n  \"homepage\": \"https://github.com/tobkle/create-graphql-server-authorization#readme\",\n  \"devDependencies\": {\n    \"babel-cli\": \"6.24.1\",\n    \"babel-eslint\": \"7.2.3\",\n    \"babel-plugin-syntax-async-functions\": \"6.13.0\",\n    \"babel-plugin-syntax-async-generators\": \"6.13.0\",\n    \"babel-plugin-transform-class-properties\": \"6.24.1\",\n    \"babel-plugin-transform-flow-strip-types\": \"6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"6.23.0\",\n    \"babel-preset-env\": \"^1.5.2\",\n    \"bson-objectid\": \"^1.1.5\",\n    \"chai\": \"4.1.1\",\n    \"chai-fs\": \"^1.0.0\",\n    \"chai-json-equal\": \"0.0.1\",\n    \"chai-spies-next\": \"^0.8.0\",\n    \"chai-subset\": \"1.5.0\",\n    \"coveralls\": \"^2.13.1\",\n    \"cross-env\": \"^5.0.5\",\n    \"dataloader\": \"^1.3.0\",\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.5.0\",\n    \"eslint-config-prettier\": \"^2.3.0\",\n    \"eslint-config-react-app\": \"^2.0.0\",\n    \"eslint-plugin-babel\": \"4.1.2\",\n    \"eslint-plugin-flowtype\": \"2.35.0\",\n    \"eslint-plugin-import\": \"^2.7.0\",\n    \"eslint-plugin-prettier\": \"^2.1.2\",\n    \"eslint-plugin-react\": \"^7.3.0\",\n    \"flow-bin\": \"0.52.0\",\n    \"isparta\": \"4.0.0\",\n    \"mocha\": \"3.5.0\",\n    \"mocha-lcov-reporter\": \"^1.3.0\",\n    \"mongo-mock\": \"^2.4.1\",\n    \"prettier\": \"^1.5.3\",\n    \"sane\": \"2.0.0\"\n  },\n  \"dependencies\": {\n    \"global\": \"^4.3.2\",\n    \"iterall\": \"^1.1.0\",\n    \"lodash\": \"4.16.4\",\n    \"mongodb\": \"^2.2.31\",\n    \"winston\": \"^2.3.1\"\n  }\n}\n",
    "longname": "/Users/Toby/MICRO/create-graphql-server-authorization/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]