[
  {
    "name": "generateAuthorizationCode",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 52,
        "line": "/*"
      },
      {
        "lineNumber": 53,
        "line": " * @desc generates authorization code"
      },
      {
        "lineNumber": 54,
        "line": " * @public"
      },
      {
        "lineNumber": 55,
        "line": " * @param {string} typeName - the name of the type"
      },
      {
        "lineNumber": 56,
        "line": " * @param {object} inputSchema - the schema for that type"
      },
      {
        "lineNumber": 57,
        "line": " * @return {object} generatedCode - generated code"
      },
      {
        "lineNumber": 58,
        "line": " */"
      },
      {
        "lineNumber": 59,
        "line": "export function generateAuthorizationCode("
      }
    ],
    "codeParams": [
      "typeName",
      "inputSchema"
    ],
    "docParams": [
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "getAllRoles",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 221,
        "line": "/*"
      },
      {
        "lineNumber": 222,
        "line": " * @desc get the roles from the @authorize directive"
      },
      {
        "lineNumber": 223,
        "line": " * @desc by reading the input schema's abstract syntax tree"
      },
      {
        "lineNumber": 224,
        "line": " * @desc to get the roles and their authorized modes"
      },
      {
        "lineNumber": 225,
        "line": " * @private"
      },
      {
        "lineNumber": 226,
        "line": " * @param {object} allRolesArguments - AST with role definitions"
      },
      {
        "lineNumber": 227,
        "line": " * @return {array} allRoles - returns the defined roles"
      },
      {
        "lineNumber": 228,
        "line": " * @example @authorize("
      },
      {
        "lineNumber": 229,
        "line": "             admin: [\"create\", \"read\", \"update\", \"delete\"]"
      },
      {
        "lineNumber": 230,
        "line": "             this: [\"read\", \"update\", \"delete\"]"
      },
      {
        "lineNumber": 231,
        "line": "            )"
      },
      {
        "lineNumber": 232,
        "line": " */"
      },
      {
        "lineNumber": 233,
        "line": "function getAllRoles("
      }
    ],
    "codeParams": [
      "allRolesArguments",
      "inputSchema"
    ],
    "docParams": [
      "undefined",
      "inputSchema"
    ]
  },
  {
    "name": "getRoleType",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 333,
        "line": "/*"
      },
      {
        "lineNumber": 334,
        "line": " * @desc decide, if the given role is whether "
      },
      {
        "lineNumber": 335,
        "line": " * a 'userRole' or a 'docRole'"
      },
      {
        "lineNumber": 336,
        "line": " *"
      },
      {
        "lineNumber": 337,
        "line": " * Procedure:"
      },
      {
        "lineNumber": 338,
        "line": " * 1. Determine, if this field is used as a roleField"
      },
      {
        "lineNumber": 339,
        "line": " * 2. Check, if this roleField..."
      },
      {
        "lineNumber": 340,
        "line": " *    a) is of type: String or [String] ==> userRole"
      },
      {
        "lineNumber": 341,
        "line": " *    b) is of type: User or [User]     ==> docRole"
      },
      {
        "lineNumber": 342,
        "line": " *    c) roleName = 'this'              ==> docRole"
      },
      {
        "lineNumber": 343,
        "line": " * 3. If there is no roleField in this type"
      },
      {
        "lineNumber": 344,
        "line": " *    it must be a userRole"
      },
      {
        "lineNumber": 345,
        "line": " * "
      },
      {
        "lineNumber": 346,
        "line": " * For 1. is a roleField:"
      },
      {
        "lineNumber": 347,
        "line": " *   read the type's abstract syntax tree"
      },
      {
        "lineNumber": 348,
        "line": " *   loop over all provided fields,"
      },
      {
        "lineNumber": 349,
        "line": " *   check, if the field has a directive '@authRole'"
      },
      {
        "lineNumber": 350,
        "line": " *   and if this authRole is 'for' the provided 'roleName'"
      },
      {
        "lineNumber": 351,
        "line": " *   or the roleName is the special case 'this'"
      },
      {
        "lineNumber": 352,
        "line": " *   ==> then it is a roleField"
      },
      {
        "lineNumber": 353,
        "line": " *"
      },
      {
        "lineNumber": 354,
        "line": " * For 2. get it's fieldType:"
      },
      {
        "lineNumber": 355,
        "line": " *   read the type's abstract syntax tree"
      },
      {
        "lineNumber": 356,
        "line": " *   for the roleField and read it's type"
      },
      {
        "lineNumber": 357,
        "line": " *   "
      },
      {
        "lineNumber": 358,
        "line": " *   a) if it is a String or List of Strings,"
      },
      {
        "lineNumber": 359,
        "line": " *   then the roleType = 'userRole'"
      },
      {
        "lineNumber": 360,
        "line": " *"
      },
      {
        "lineNumber": 361,
        "line": " *   b) if it is a User or List of Users (userIds),"
      },
      {
        "lineNumber": 362,
        "line": " *   then the roleType = 'docType'"
      },
      {
        "lineNumber": 363,
        "line": " *"
      },
      {
        "lineNumber": 364,
        "line": " *   c) special case: roleName = 'this'"
      },
      {
        "lineNumber": 365,
        "line": " *   (it doesn't look for an authRole for 'this')"
      },
      {
        "lineNumber": 366,
        "line": " *   it means the document's id field is used for this"
      },
      {
        "lineNumber": 367,
        "line": " *   meaning the role defines the authorizations,"
      },
      {
        "lineNumber": 368,
        "line": " *   a User has upon his own User document"
      },
      {
        "lineNumber": 369,
        "line": " *"
      },
      {
        "lineNumber": 370,
        "line": " * For 3. none of the above applies"
      },
      {
        "lineNumber": 371,
        "line": " *   so the role must be a userRole"
      },
      {
        "lineNumber": 372,
        "line": " *   "
      },
      {
        "lineNumber": 373,
        "line": " * @private"
      },
      {
        "lineNumber": 374,
        "line": " * @param {string} roleName - name of the role"
      },
      {
        "lineNumber": 375,
        "line": " * @return {string} roleType - which is whether 'userRole' or 'docRole'"
      },
      {
        "lineNumber": 376,
        "line": " */"
      },
      {
        "lineNumber": 377,
        "line": "function getRoleType(name: string = '', inputSchema: any = {}): any {"
      }
    ],
    "codeParams": [
      "name",
      "inputSchema"
    ],
    "docParams": [
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthCodeModeReadOne",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 701,
        "line": "/*"
      },
      {
        "lineNumber": 702,
        "line": " * @desc generate authorization code for mode readOne"
      },
      {
        "lineNumber": 703,
        "line": " * @private"
      },
      {
        "lineNumber": 704,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 705,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 706,
        "line": " * @param {string} userRoles - list of userRoles"
      },
      {
        "lineNumber": 707,
        "line": " * @param {string} docRoles - list of docRoles"
      },
      {
        "lineNumber": 708,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 709,
        "line": " */"
      },
      {
        "lineNumber": 710,
        "line": "function generateAuthCodeModeReadOne("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName",
      "userRoles",
      "docRoles"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthCodeModeReadMany",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 742,
        "line": "/*"
      },
      {
        "lineNumber": 743,
        "line": " * @desc generate authorization code for mode readMany"
      },
      {
        "lineNumber": 744,
        "line": " * @private"
      },
      {
        "lineNumber": 745,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 746,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 747,
        "line": " * @param {string} userRoles - list of userRoles"
      },
      {
        "lineNumber": 748,
        "line": " * @param {string} docRoles - list of docRoles"
      },
      {
        "lineNumber": 749,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 750,
        "line": " */"
      },
      {
        "lineNumber": 751,
        "line": "function generateAuthCodeModeReadMany("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName",
      "userRoles",
      "docRoles"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthCodeModeCreate",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 773,
        "line": "/*"
      },
      {
        "lineNumber": 774,
        "line": " * @desc generate authorization code for mode create"
      },
      {
        "lineNumber": 775,
        "line": " * @private"
      },
      {
        "lineNumber": 776,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 777,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 778,
        "line": " * @param {string} userRoles - list of userRoles"
      },
      {
        "lineNumber": 779,
        "line": " * @param {string} docRoles - list of docRoles"
      },
      {
        "lineNumber": 780,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 781,
        "line": " */"
      },
      {
        "lineNumber": 782,
        "line": "function generateAuthCodeModeCreate("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName",
      "userRoles",
      "docRoles",
      "roleFieldName"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthCodeModeUpdate",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 819,
        "line": "/*"
      },
      {
        "lineNumber": 820,
        "line": " * @desc generate authorization code for mode update"
      },
      {
        "lineNumber": 821,
        "line": " * @private"
      },
      {
        "lineNumber": 822,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 823,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 824,
        "line": " * @param {string} userRoles - list of userRoles"
      },
      {
        "lineNumber": 825,
        "line": " * @param {string} docRoles - list of docRoles"
      },
      {
        "lineNumber": 826,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 827,
        "line": " */"
      },
      {
        "lineNumber": 828,
        "line": "function generateAuthCodeModeUpdate("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName",
      "userRoles",
      "docRoles",
      "roleFieldName"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthCodeModeDelete",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 872,
        "line": "/*"
      },
      {
        "lineNumber": 873,
        "line": " * @desc generate authorization code for mode delete"
      },
      {
        "lineNumber": 874,
        "line": " * @private"
      },
      {
        "lineNumber": 875,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 876,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 877,
        "line": " * @param {string} userRoles - list of userRoles"
      },
      {
        "lineNumber": 878,
        "line": " * @param {string} docRoles - list of docRoles"
      },
      {
        "lineNumber": 879,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 880,
        "line": " */"
      },
      {
        "lineNumber": 881,
        "line": "function generateAuthCodeModeDelete("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName",
      "userRoles",
      "docRoles"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateCreatedBy",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 903,
        "line": "/*"
      },
      {
        "lineNumber": 904,
        "line": " * @desc generate createdBy method"
      },
      {
        "lineNumber": 905,
        "line": " * @private"
      },
      {
        "lineNumber": 906,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 907,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 908,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 909,
        "line": " */"
      },
      {
        "lineNumber": 910,
        "line": "function generateCreatedBy("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName"
    ],
    "docParams": [
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateUpdatedBy",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 927,
        "line": "/*"
      },
      {
        "lineNumber": 928,
        "line": " * @desc generate updatedBy method"
      },
      {
        "lineNumber": 929,
        "line": " * @private"
      },
      {
        "lineNumber": 930,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 931,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 932,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 933,
        "line": " */"
      },
      {
        "lineNumber": 934,
        "line": "function generateUpdatedBy("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName"
    ],
    "docParams": [
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthRoleDefinition",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 951,
        "line": "/*"
      },
      {
        "lineNumber": 952,
        "line": " * @desc generate updatedBy method"
      },
      {
        "lineNumber": 953,
        "line": " * @private"
      },
      {
        "lineNumber": 954,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 955,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 956,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 957,
        "line": " */"
      },
      {
        "lineNumber": 958,
        "line": "function generateAuthRoleDefinition("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName"
    ],
    "docParams": [
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "generateAuthRoleMethod",
    "filePath": "src/generate/index.js",
    "lines": [
      {
        "lineNumber": 974,
        "line": "/*"
      },
      {
        "lineNumber": 975,
        "line": " * @desc generate authRole() method only in type User"
      },
      {
        "lineNumber": 976,
        "line": " * @private"
      },
      {
        "lineNumber": 977,
        "line": " * @param {boolean} authorize - flag for authorization logic"
      },
      {
        "lineNumber": 978,
        "line": " * @param {string} typeName - name of the type"
      },
      {
        "lineNumber": 979,
        "line": " * @param {string} roleFieldName - field name, where userRole is stored on type User"
      },
      {
        "lineNumber": 980,
        "line": " * @return {string} generatedCode - generated code to be injected"
      },
      {
        "lineNumber": 981,
        "line": " */"
      },
      {
        "lineNumber": 982,
        "line": "function generateAuthRoleMethod("
      }
    ],
    "codeParams": [
      "authorize",
      "typeName",
      "roleFieldName"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "authlog",
    "filePath": "src/lib/authlog.js",
    "lines": [
      {
        "lineNumber": 5,
        "line": "/*"
      },
      {
        "lineNumber": 6,
        "line": " * @desc Central logger for authorization checks"
      },
      {
        "lineNumber": 7,
        "line": " * @public"
      },
      {
        "lineNumber": 8,
        "line": " * @param {string} resolver - log name of a resolver"
      },
      {
        "lineNumber": 9,
        "line": " * @param {string} mode - crud operation name"
      },
      {
        "lineNumber": 10,
        "line": " * @param {object} me - current user"
      },
      {
        "lineNumber": 11,
        "line": " * @return {"
      },
      {
        "lineNumber": 12,
        "line": " *    debug {function} - debug() function"
      },
      {
        "lineNumber": 13,
        "line": " *    error {function} - error() function"
      },
      {
        "lineNumber": 14,
        "line": " * }"
      },
      {
        "lineNumber": 15,
        "line": " */"
      },
      {
        "lineNumber": 16,
        "line": "export function authlog("
      }
    ],
    "codeParams": [
      "resolver",
      "mode",
      "me"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "checkAuthDoc",
    "filePath": "src/lib/checkAuthDoc.js",
    "lines": [
      {
        "lineNumber": 7,
        "line": "/*"
      },
      {
        "lineNumber": 8,
        "line": " * @desc Returns an authorized document"
      },
      {
        "lineNumber": 9,
        "line": " * @public"
      },
      {
        "lineNumber": 10,
        "line": " * @param {object} doc - any document to be checked"
      },
      {
        "lineNumber": 11,
        "line": " * @param {object} me - current user"
      },
      {
        "lineNumber": 12,
        "line": " * @param {array} userRoles - list of userRoles"
      },
      {
        "lineNumber": 13,
        "line": " * @param {array} docRoles - list of docRoles"
      },
      {
        "lineNumber": 14,
        "line": " * @param {object} User - model context of type User"
      },
      {
        "lineNumber": 15,
        "line": " * @param {function} logger - the logger function"
      },
      {
        "lineNumber": 16,
        "line": " * @return {object} doc - returns the authorized document"
      },
      {
        "lineNumber": 17,
        "line": " * @throws {Error} - throws on a missing authorization"
      },
      {
        "lineNumber": 18,
        "line": " */"
      },
      {
        "lineNumber": 19,
        "line": ""
      },
      {
        "lineNumber": 20,
        "line": "export function checkAuthDoc("
      }
    ],
    "codeParams": [
      "doc",
      "me",
      "userRoles",
      "docRoles",
      "*",
      "logger"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "findByIds",
    "filePath": "src/lib/findByIds.js",
    "lines": [
      {
        "lineNumber": 2,
        "line": "/* @desc find a record by an id (cached with dataloader)"
      },
      {
        "lineNumber": 3,
        "line": " * @desc returns the record, checks authorization if set"
      },
      {
        "lineNumber": 4,
        "line": " * enhancement of tmeasday'findByIds"
      },
      {
        "lineNumber": 5,
        "line": " * @public"
      },
      {
        "lineNumber": 6,
        "line": " * @param {object} collection - data model type collection"
      },
      {
        "lineNumber": 7,
        "line": " * @param {array} ids - one or a list of document ids"
      },
      {
        "lineNumber": 8,
        "line": " * @param {object} authQuery - authorization query to be used to access data"
      },
      {
        "lineNumber": 9,
        "line": " * @return {array} documents - the found documents with these ids"
      },
      {
        "lineNumber": 10,
        "line": " */"
      },
      {
        "lineNumber": 11,
        "line": "export function findByIds("
      }
    ],
    "codeParams": [
      "collection",
      "ids",
      "authQuery"
    ],
    "docParams": [
      "collection",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "protectFields",
    "filePath": "src/lib/protectFields.js",
    "lines": [
      {
        "lineNumber": 4,
        "line": "/*"
      },
      {
        "lineNumber": 5,
        "line": " * @desc Protects a field based on authorizations"
      },
      {
        "lineNumber": 6,
        "line": " * @public"
      },
      {
        "lineNumber": 7,
        "line": " * @param {object} me - current user"
      },
      {
        "lineNumber": 8,
        "line": " * @param {array} authorizedUserRoles - userRoles with authorization"
      },
      {
        "lineNumber": 9,
        "line": " * @param {array} protectedFields - list of fields only for these userRoles"
      },
      {
        "lineNumber": 10,
        "line": " * @param {object} inputObject - document with might contain those fields"
      },
      {
        "lineNumber": 11,
        "line": " * @param {object} User - model context for type User"
      },
      {
        "lineNumber": 12,
        "line": " * @return {object} result - document with or without the protected fields"
      },
      {
        "lineNumber": 13,
        "line": " */"
      },
      {
        "lineNumber": 14,
        "line": "export function protectFields("
      }
    ],
    "codeParams": [
      "me",
      "authorizedUserRoles",
      "protectedFields",
      "inputObject",
      "*"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "queryForRoles",
    "filePath": "src/lib/queryForRoles.js",
    "lines": [
      {
        "lineNumber": 10,
        "line": "/*"
      },
      {
        "lineNumber": 11,
        "line": " * @desc Prepare a query object for mongodb operations with authorization queries"
      },
      {
        "lineNumber": 12,
        "line": " * @desc creates an authQuery object with additional "
      },
      {
        "lineNumber": 13,
        "line": " * @desc query arguments, to implement authorization restrictions for mongodb access"
      },
      {
        "lineNumber": 14,
        "line": " * @public"
      },
      {
        "lineNumber": 15,
        "line": " * @param {object} me - current user"
      },
      {
        "lineNumber": 16,
        "line": " * @param {array} userRoles - list of userRoles"
      },
      {
        "lineNumber": 17,
        "line": " * @param {array} docRoles - list of docRoles"
      },
      {
        "lineNumber": 18,
        "line": " * @param {object} inputObject - document"
      },
      {
        "lineNumber": 19,
        "line": " * @param {object} User - model context for type User"
      },
      {
        "lineNumber": 20,
        "line": " * @param {object} logger - logger function"
      },
      {
        "lineNumber": 21,
        "line": " * @return {object, exception} queryObject - authQuery for data operations"
      },
      {
        "lineNumber": 22,
        "line": " *"
      },
      {
        "lineNumber": 23,
        "line": " * @example: queryForRoles(me, userRoles, docRoles, { User }, "
      },
      {
        "lineNumber": 24,
        "line": " *                         authlog(resolver, mode, me ) ); "
      },
      {
        "lineNumber": 25,
        "line": " */"
      },
      {
        "lineNumber": 26,
        "line": "export function queryForRoles("
      }
    ],
    "codeParams": [
      "me",
      "userRoles",
      "docRoles",
      "*",
      "logger"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  },
  {
    "name": "userRoleAuthorized",
    "filePath": "src/lib/userRoleAuthorized.js",
    "lines": [
      {
        "lineNumber": 7,
        "line": "/*"
      },
      {
        "lineNumber": 8,
        "line": " * @desc Is a user's role authorized for a document"
      },
      {
        "lineNumber": 9,
        "line": " * @desc You can use also the role 'world', to authorize everyone"
      },
      {
        "lineNumber": 10,
        "line": " * @public"
      },
      {
        "lineNumber": 11,
        "line": " * @param {object} me - current user"
      },
      {
        "lineNumber": 12,
        "line": " * @param {array} userRoles - list of userRoles"
      },
      {
        "lineNumber": 13,
        "line": " * @param {object} User - model context for type User"
      },
      {
        "lineNumber": 14,
        "line": " * @param {object} logger - logger function"
      },
      {
        "lineNumber": 15,
        "line": " * @return {boolean} authorized - true, if userRole is authorized"
      },
      {
        "lineNumber": 16,
        "line": " */"
      },
      {
        "lineNumber": 17,
        "line": ""
      },
      {
        "lineNumber": 18,
        "line": "export function userRoleAuthorized("
      }
    ],
    "codeParams": [
      "me",
      "userRoles",
      "*",
      "logger"
    ],
    "docParams": [
      "undefined",
      "undefined",
      "undefined",
      "undefined"
    ]
  }
]